
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027e4  080027e4  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080027ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000009c  08002888  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002888  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147f1  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fae  00000000  00000000  000348bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f8  00000000  00000000  00037870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000480  00000000  00000000  00037e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005574  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092a2  00000000  00000000  0003d85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000eb7a  00000000  00000000  00046afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00055678  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001328  00000000  00000000  000556cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002748 	.word	0x08002748

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a0 	.word	0x200000a0
 80001d0:	08002748 	.word	0x08002748

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <GUI_voidInit>:
u8 S[10];

u8 array[22];

void GUI_voidInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0


	//TX->PA9  RX->PA10
	GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN9, GPIO_MODE_AF_PP);
 80004d0:	2202      	movs	r2, #2
 80004d2:	2109      	movs	r1, #9
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fd0b 	bl	8000ef0 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(GPIO_PORTA, GPIO_PIN10, GPIO_MODE_AF_PP);
 80004da:	2202      	movs	r2, #2
 80004dc:	210a      	movs	r1, #10
 80004de:	2000      	movs	r0, #0
 80004e0:	f000 fd06 	bl	8000ef0 <GPIO_voidSetPinMode>
	GPIO_voidSetPinALTF(GPIO_PORTA, GPIO_PIN9, GPIO_AF7_USART1_USART2_SPI1);
 80004e4:	2207      	movs	r2, #7
 80004e6:	2109      	movs	r1, #9
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fd45 	bl	8000f78 <GPIO_voidSetPinALTF>
	GPIO_voidSetPinALTF(GPIO_PORTA, GPIO_PIN10,GPIO_AF7_USART1_USART2_SPI1);
 80004ee:	2207      	movs	r2, #7
 80004f0:	210a      	movs	r1, #10
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fd40 	bl	8000f78 <GPIO_voidSetPinALTF>

	UART_voidInit();
 80004f8:	f002 f804 	bl	8002504 <UART_voidInit>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <GUI_voidSendSpeedDistance>:


void GUI_voidSendSpeedDistance(u32 Copy_u8Speed , u32 Copy_u8_Distance )
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]

	//Sending motor speed and distance to raspberry pi

	u8 loop, index, S_len, D_len;

	S_len = D_len = 10;
 800050a:	230a      	movs	r3, #10
 800050c:	737b      	strb	r3, [r7, #13]
 800050e:	7b7b      	ldrb	r3, [r7, #13]
 8000510:	733b      	strb	r3, [r7, #12]

	index = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	73bb      	strb	r3, [r7, #14]

	/*Convert Speed int to Speed Str*/
	itoa (Copy_u8Speed, S, 10);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	220a      	movs	r2, #10
 800051a:	4927      	ldr	r1, [pc, #156]	; (80005b8 <GUI_voidSendSpeedDistance+0xb8>)
 800051c:	4618      	mov	r0, r3
 800051e:	f002 f8c7 	bl	80026b0 <itoa>
	for(loop = 0; loop < S_len; loop++)
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
 8000526:	e00b      	b.n	8000540 <GUI_voidSendSpeedDistance+0x40>
	{
		array[index] = S[loop];
 8000528:	7bfa      	ldrb	r2, [r7, #15]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	4922      	ldr	r1, [pc, #136]	; (80005b8 <GUI_voidSendSpeedDistance+0xb8>)
 800052e:	5c89      	ldrb	r1, [r1, r2]
 8000530:	4a22      	ldr	r2, [pc, #136]	; (80005bc <GUI_voidSendSpeedDistance+0xbc>)
 8000532:	54d1      	strb	r1, [r2, r3]
		index++;
 8000534:	7bbb      	ldrb	r3, [r7, #14]
 8000536:	3301      	adds	r3, #1
 8000538:	73bb      	strb	r3, [r7, #14]
	for(loop = 0; loop < S_len; loop++)
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	3301      	adds	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
 8000540:	7bfa      	ldrb	r2, [r7, #15]
 8000542:	7b3b      	ldrb	r3, [r7, #12]
 8000544:	429a      	cmp	r2, r3
 8000546:	d3ef      	bcc.n	8000528 <GUI_voidSendSpeedDistance+0x28>
	}

	array[index]=' ';
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <GUI_voidSendSpeedDistance+0xbc>)
 800054c:	2120      	movs	r1, #32
 800054e:	54d1      	strb	r1, [r2, r3]
	index++;
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	3301      	adds	r3, #1
 8000554:	73bb      	strb	r3, [r7, #14]

	/*Convert Distance int to Distance Str*/
	itoa (Copy_u8_Distance, D, 10);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	220a      	movs	r2, #10
 800055a:	4919      	ldr	r1, [pc, #100]	; (80005c0 <GUI_voidSendSpeedDistance+0xc0>)
 800055c:	4618      	mov	r0, r3
 800055e:	f002 f8a7 	bl	80026b0 <itoa>
	for(loop = 0; loop < D_len; loop++)
 8000562:	2300      	movs	r3, #0
 8000564:	73fb      	strb	r3, [r7, #15]
 8000566:	e00b      	b.n	8000580 <GUI_voidSendSpeedDistance+0x80>
	{
		array[index] = D[loop];
 8000568:	7bfa      	ldrb	r2, [r7, #15]
 800056a:	7bbb      	ldrb	r3, [r7, #14]
 800056c:	4914      	ldr	r1, [pc, #80]	; (80005c0 <GUI_voidSendSpeedDistance+0xc0>)
 800056e:	5c89      	ldrb	r1, [r1, r2]
 8000570:	4a12      	ldr	r2, [pc, #72]	; (80005bc <GUI_voidSendSpeedDistance+0xbc>)
 8000572:	54d1      	strb	r1, [r2, r3]
		index++;
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	3301      	adds	r3, #1
 8000578:	73bb      	strb	r3, [r7, #14]
	for(loop = 0; loop < D_len; loop++)
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	3301      	adds	r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	7bfa      	ldrb	r2, [r7, #15]
 8000582:	7b7b      	ldrb	r3, [r7, #13]
 8000584:	429a      	cmp	r2, r3
 8000586:	d3ef      	bcc.n	8000568 <GUI_voidSendSpeedDistance+0x68>
	}
	array[index]='\r';
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <GUI_voidSendSpeedDistance+0xbc>)
 800058c:	210d      	movs	r1, #13
 800058e:	54d1      	strb	r1, [r2, r3]
	index++;
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	3301      	adds	r3, #1
 8000594:	73bb      	strb	r3, [r7, #14]

	UART_voidTransmit( array , 22);
 8000596:	2116      	movs	r1, #22
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <GUI_voidSendSpeedDistance+0xbc>)
 800059a:	f001 ffd9 	bl	8002550 <UART_voidTransmit>

	array[0]='\0';
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <GUI_voidSendSpeedDistance+0xbc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
	S[0]='\0';
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <GUI_voidSendSpeedDistance+0xb8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	D[0]='\0';
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <GUI_voidSendSpeedDistance+0xc0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000e8 	.word	0x200000e8
 80005bc:	200000f4 	.word	0x200000f4
 80005c0:	200000dc 	.word	0x200000dc

080005c4 <Buzzer_Init>:
/**
 * @brief Initializes the buzzer sensor.
 *
 * This function initializes the buzzer sensor by setting its GPIO pin mode.
 */
void Buzzer_Init() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	MCL_GPIO_vSetPinMode(BUZZER_CHANNEL, GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80005c8:	2301      	movs	r3, #1
 80005ca:	2201      	movs	r2, #1
 80005cc:	2106      	movs	r1, #6
 80005ce:	4802      	ldr	r0, [pc, #8]	; (80005d8 <Buzzer_Init+0x14>)
 80005d0:	f000 fbfe 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40020400 	.word	0x40020400

080005dc <Buzzer_ON>:
/**
 * @brief Turns the buzzer sensor ON.
 *
 * This function activates the buzzer sensor, causing it to produce sound.
 */
void Buzzer_ON(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	MCL_GPIO_vAtomicSetPin(BUZZER_CHANNEL, PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2106      	movs	r1, #6
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <Buzzer_ON+0x14>)
 80005e6:	f000 fe0c 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400

080005f4 <Buzzer_Off>:
/**
 * @brief Turns the buzzer sensor OFF.
 *
 * This function deactivates the buzzer sensor, stopping it from producing sound.
 */
void Buzzer_Off(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	MCL_GPIO_vAtomicSetPin(BUZZER_CHANNEL, PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2106      	movs	r1, #6
 80005fc:	4802      	ldr	r0, [pc, #8]	; (8000608 <Buzzer_Off+0x14>)
 80005fe:	f000 fe00 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40020400 	.word	0x40020400

0800060c <CLCD_voidSendCommand>:
 |        PC0|---------------->|RS        |         |        PC0|---------------->|RS        |
  -----------                   ----------           -----------                   ----------
 */

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	CLCD_voidSendPuls();


#elif CLCD_MODE == MODE_4_BIT
	/*Set RS pin to low for command*/
	MCL_GPIO_vAtomicSetPin(CLCD_CTRL_PORT , CLCD_RS_PIN , PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	210b      	movs	r1, #11
 800061a:	4831      	ldr	r0, [pc, #196]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 800061c:	f000 fdf1 	bl	8001202 <MCL_GPIO_vAtomicSetPin>

	/*Set RW pin to low for write*/
	MCL_GPIO_vAtomicSetPin(CLCD_CTRL_PORT , CLCD_RW_PIN , PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	210c      	movs	r1, #12
 8000624:	482e      	ldr	r0, [pc, #184]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 8000626:	f000 fdec 	bl	8001202 <MCL_GPIO_vAtomicSetPin>


	/*Send the most 4 bits of data to high nibbles*/
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_ONE   , GET_BIT(Copy_u8Command,4));
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	091b      	lsrs	r3, r3, #4
 800062e:	b2db      	uxtb	r3, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	461a      	mov	r2, r3
 8000638:	2105      	movs	r1, #5
 800063a:	4829      	ldr	r0, [pc, #164]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 800063c:	f000 fde1 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_TWO   , GET_BIT(Copy_u8Command,5));
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	2108      	movs	r1, #8
 8000650:	4823      	ldr	r0, [pc, #140]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 8000652:	f000 fdd6 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_THREE , GET_BIT(Copy_u8Command,6));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	099b      	lsrs	r3, r3, #6
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	210e      	movs	r1, #14
 8000666:	481e      	ldr	r0, [pc, #120]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 8000668:	f000 fdcb 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_FOUR  , GET_BIT(Copy_u8Command,7));
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	09db      	lsrs	r3, r3, #7
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	210f      	movs	r1, #15
 8000676:	481a      	ldr	r0, [pc, #104]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 8000678:	f000 fdc3 	bl	8001202 <MCL_GPIO_vAtomicSetPin>

	CLCD_voidSendPuls();
 800067c:	f000 f98c 	bl	8000998 <CLCD_voidSendPuls>

	/*Send the Least 4 bits of data to Low nibbles*/
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_ONE   ,GET_BIT(Copy_u8Command,0));
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	2105      	movs	r1, #5
 800068c:	4814      	ldr	r0, [pc, #80]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 800068e:	f000 fdb8 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_TWO   ,GET_BIT(Copy_u8Command,1));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	085b      	lsrs	r3, r3, #1
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	b2db      	uxtb	r3, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	2108      	movs	r1, #8
 80006a2:	480f      	ldr	r0, [pc, #60]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 80006a4:	f000 fdad 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_THREE ,GET_BIT(Copy_u8Command,2));
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	210e      	movs	r1, #14
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 80006ba:	f000 fda2 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_FOUR  ,GET_BIT(Copy_u8Command,3));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	210f      	movs	r1, #15
 80006ce:	4804      	ldr	r0, [pc, #16]	; (80006e0 <CLCD_voidSendCommand+0xd4>)
 80006d0:	f000 fd97 	bl	8001202 <MCL_GPIO_vAtomicSetPin>


	CLCD_voidSendPuls();
 80006d4:	f000 f960 	bl	8000998 <CLCD_voidSendPuls>

#endif
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020000 	.word	0x40020000

080006e4 <CLCD_voidSendData>:


void CLCD_voidSendData(u8 Copy_u8Data)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]


#elif CLCD_MODE == MODE_4_BIT

	/*Set RS pin to low for command*/
	MCL_GPIO_vAtomicSetPin(CLCD_CTRL_PORT , CLCD_RS_PIN , PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	210b      	movs	r1, #11
 80006f2:	4831      	ldr	r0, [pc, #196]	; (80007b8 <CLCD_voidSendData+0xd4>)
 80006f4:	f000 fd85 	bl	8001202 <MCL_GPIO_vAtomicSetPin>



	/*Set RW pin to low for write*/
	MCL_GPIO_vAtomicSetPin(CLCD_CTRL_PORT , CLCD_RW_PIN , PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	210c      	movs	r1, #12
 80006fc:	482e      	ldr	r0, [pc, #184]	; (80007b8 <CLCD_voidSendData+0xd4>)
 80006fe:	f000 fd80 	bl	8001202 <MCL_GPIO_vAtomicSetPin>



	/*Send the most 4 bits of data to high nibbles*/
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_ONE   , GET_BIT(Copy_u8Data,4));
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	2105      	movs	r1, #5
 8000712:	4829      	ldr	r0, [pc, #164]	; (80007b8 <CLCD_voidSendData+0xd4>)
 8000714:	f000 fd75 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_TWO   , GET_BIT(Copy_u8Data,5));
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	461a      	mov	r2, r3
 8000726:	2108      	movs	r1, #8
 8000728:	4823      	ldr	r0, [pc, #140]	; (80007b8 <CLCD_voidSendData+0xd4>)
 800072a:	f000 fd6a 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_THREE , GET_BIT(Copy_u8Data,6));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	099b      	lsrs	r3, r3, #6
 8000732:	b2db      	uxtb	r3, r3
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	210e      	movs	r1, #14
 800073e:	481e      	ldr	r0, [pc, #120]	; (80007b8 <CLCD_voidSendData+0xd4>)
 8000740:	f000 fd5f 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_FOUR  , GET_BIT(Copy_u8Data,7));
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	09db      	lsrs	r3, r3, #7
 8000748:	b2db      	uxtb	r3, r3
 800074a:	461a      	mov	r2, r3
 800074c:	210f      	movs	r1, #15
 800074e:	481a      	ldr	r0, [pc, #104]	; (80007b8 <CLCD_voidSendData+0xd4>)
 8000750:	f000 fd57 	bl	8001202 <MCL_GPIO_vAtomicSetPin>


	CLCD_voidSendPuls();
 8000754:	f000 f920 	bl	8000998 <CLCD_voidSendPuls>

	/*Send the Least 4 bits of data to Low nibbles*/
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_ONE   ,GET_BIT(Copy_u8Data,0));
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	2105      	movs	r1, #5
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <CLCD_voidSendData+0xd4>)
 8000766:	f000 fd4c 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_TWO   ,GET_BIT(Copy_u8Data,1));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	2108      	movs	r1, #8
 800077a:	480f      	ldr	r0, [pc, #60]	; (80007b8 <CLCD_voidSendData+0xd4>)
 800077c:	f000 fd41 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_THREE ,GET_BIT(Copy_u8Data,2));
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	210e      	movs	r1, #14
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <CLCD_voidSendData+0xd4>)
 8000792:	f000 fd36 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(CLCD_DATA_PORT , CLCD_DATA_PIN_FOUR  ,GET_BIT(Copy_u8Data,3));
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	08db      	lsrs	r3, r3, #3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	210f      	movs	r1, #15
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <CLCD_voidSendData+0xd4>)
 80007a8:	f000 fd2b 	bl	8001202 <MCL_GPIO_vAtomicSetPin>

	CLCD_voidSendPuls();
 80007ac:	f000 f8f4 	bl	8000998 <CLCD_voidSendPuls>

#endif
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020000 	.word	0x40020000

080007bc <CLCD_voidInit>:




void CLCD_voidInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

#elif CLCD_MODE == MODE_4_BIT

	/*Set Direction Pins from LCD*/

	MCL_GPIO_vSetPinMode(CLCD_DATA_PORT,CLCD_DATA_PIN_ONE , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80007c0:	2301      	movs	r3, #1
 80007c2:	2201      	movs	r2, #1
 80007c4:	2105      	movs	r1, #5
 80007c6:	4823      	ldr	r0, [pc, #140]	; (8000854 <CLCD_voidInit+0x98>)
 80007c8:	f000 fb02 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(CLCD_DATA_PORT,CLCD_DATA_PIN_TWO , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80007cc:	2301      	movs	r3, #1
 80007ce:	2201      	movs	r2, #1
 80007d0:	2108      	movs	r1, #8
 80007d2:	4820      	ldr	r0, [pc, #128]	; (8000854 <CLCD_voidInit+0x98>)
 80007d4:	f000 fafc 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(CLCD_DATA_PORT,CLCD_DATA_PIN_THREE , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80007d8:	2301      	movs	r3, #1
 80007da:	2201      	movs	r2, #1
 80007dc:	210e      	movs	r1, #14
 80007de:	481d      	ldr	r0, [pc, #116]	; (8000854 <CLCD_voidInit+0x98>)
 80007e0:	f000 faf6 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(CLCD_DATA_PORT,CLCD_DATA_PIN_FOUR , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80007e4:	2301      	movs	r3, #1
 80007e6:	2201      	movs	r2, #1
 80007e8:	210f      	movs	r1, #15
 80007ea:	481a      	ldr	r0, [pc, #104]	; (8000854 <CLCD_voidInit+0x98>)
 80007ec:	f000 faf0 	bl	8000dd0 <MCL_GPIO_vSetPinMode>

	MCL_GPIO_vSetPinMode(CLCD_CTRL_PORT,CLCD_RS_PIN , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80007f0:	2301      	movs	r3, #1
 80007f2:	2201      	movs	r2, #1
 80007f4:	210b      	movs	r1, #11
 80007f6:	4817      	ldr	r0, [pc, #92]	; (8000854 <CLCD_voidInit+0x98>)
 80007f8:	f000 faea 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(CLCD_CTRL_PORT,CLCD_RW_PIN , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 80007fc:	2301      	movs	r3, #1
 80007fe:	2201      	movs	r2, #1
 8000800:	210c      	movs	r1, #12
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <CLCD_voidInit+0x98>)
 8000804:	f000 fae4 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(CLCD_CTRL_PORT,CLCD_E_PIN , GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 8000808:	2301      	movs	r3, #1
 800080a:	2201      	movs	r2, #1
 800080c:	210d      	movs	r1, #13
 800080e:	4811      	ldr	r0, [pc, #68]	; (8000854 <CLCD_voidInit+0x98>)
 8000810:	f000 fade 	bl	8000dd0 <MCL_GPIO_vSetPinMode>




	/*Wait for more than 30 ms before any action (VDD rises to 4.5 v)*/
	MCL_STK_vDelay_ms(30);
 8000814:	201e      	movs	r0, #30
 8000816:	f000 fe87 	bl	8001528 <MCL_STK_vDelay_ms>

	CLCD_voidSendCommand(0x33);
 800081a:	2033      	movs	r0, #51	; 0x33
 800081c:	f7ff fef6 	bl	800060c <CLCD_voidSendCommand>
	CLCD_voidSendCommand(0x32);
 8000820:	2032      	movs	r0, #50	; 0x32
 8000822:	f7ff fef3 	bl	800060c <CLCD_voidSendCommand>


	/*Function set command: 2 lines, 5*7 Font size*/
	CLCD_voidSendCommand(CLCD_FUNCSET_4BIT);
 8000826:	2028      	movs	r0, #40	; 0x28
 8000828:	f7ff fef0 	bl	800060c <CLCD_voidSendCommand>

	/*Display on off control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(CLCD_DISPON_CURSOFF);
 800082c:	200c      	movs	r0, #12
 800082e:	f7ff feed 	bl	800060c <CLCD_voidSendCommand>

	/* wait more than 39 Ms*/
	MCL_STK_vDelay_ms(2);
 8000832:	2002      	movs	r0, #2
 8000834:	f000 fe78 	bl	8001528 <MCL_STK_vDelay_ms>

	CLCD_voidSendCommand(CLCD_HOME);
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff fee7 	bl	800060c <CLCD_voidSendCommand>

	/*Clear Display*/
	CLCD_voidSendCommand(CLCD_CLR);
 800083e:	2001      	movs	r0, #1
 8000840:	f7ff fee4 	bl	800060c <CLCD_voidSendCommand>

	/* wait more than 1.53 Ms*/
	MCL_STK_vDelay_ms(2);
 8000844:	2002      	movs	r0, #2
 8000846:	f000 fe6f 	bl	8001528 <MCL_STK_vDelay_ms>

	CLCD_voidSendCommand(CLCD_ENTRYMODE);
 800084a:	2006      	movs	r0, #6
 800084c:	f7ff fede 	bl	800060c <CLCD_voidSendCommand>

#else
#error ("You Chosed Wrong LCD Mode")

#endif
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020000 	.word	0x40020000

08000858 <CLCD_voidSendString>:


void CLCD_voidSendString(const char *Copy_pcString)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	u8 Local_u8Counter=0;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]

	while(Copy_pcString[Local_u8Counter] != '\0')
 8000864:	e009      	b.n	800087a <CLCD_voidSendString+0x22>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff38 	bl	80006e4 <CLCD_voidSendData>
		Local_u8Counter++;
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	3301      	adds	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
	while(Copy_pcString[Local_u8Counter] != '\0')
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1ef      	bne.n	8000866 <CLCD_voidSendString+0xe>
	}
}
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <CLCD_voidSendStringPosition>:
}



void CLCD_voidSendStringPosition(const char * Copy_puString , u8 Copy_u8Xposition , u8 Copy_u8Yposition)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
 800089c:	4613      	mov	r3, r2
 800089e:	70bb      	strb	r3, [r7, #2]
	CLCD_voidGoToXY(Copy_u8Xposition,Copy_u8Yposition);
 80008a0:	78ba      	ldrb	r2, [r7, #2]
 80008a2:	78fb      	ldrb	r3, [r7, #3]
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f807 	bl	80008ba <CLCD_voidGoToXY>
	CLCD_voidSendString(Copy_puString);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ffd3 	bl	8000858 <CLCD_voidSendString>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <CLCD_voidGoToXY>:



void CLCD_voidGoToXY(u8 Copy_u8XPosition , u8 Copy_u8YPosition )
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	460a      	mov	r2, r1
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4613      	mov	r3, r2
 80008c8:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8Address;

	if (Copy_u8XPosition == CLCD_ROW_0)
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <CLCD_voidGoToXY+0x1c>
	{
		/*Location is at first line*/
		Local_u8Address = Copy_u8YPosition;
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e005      	b.n	80008e2 <CLCD_voidGoToXY+0x28>
	}

	else if( Copy_u8XPosition == CLCD_ROW_1)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d102      	bne.n	80008e2 <CLCD_voidGoToXY+0x28>
	{
		/*Location is at Second line*/
		Local_u8Address = Copy_u8YPosition + CLCD_SET_DDRAM_ROW1;
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	3340      	adds	r3, #64	; 0x40
 80008e0:	73fb      	strb	r3, [r7, #15]
	}
	/*Set bit number 7 (10000000) for set DDRAM Address Command than send the command  */
	CLCD_voidSendCommand(Local_u8Address + CLCD_SET_DDRAM_COMMAND);
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	3b80      	subs	r3, #128	; 0x80
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe8f 	bl	800060c <CLCD_voidSendCommand>
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <CLCD_voidPrintINTNumber>:
	CLCD_voidSendData(Copy_u8PatternNumber);
}


void CLCD_voidPrintINTNumber(u64 Copy_u16Number)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b08e      	sub	sp, #56	; 0x38
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	e9c7 0100 	strd	r0, r1, [r7]

	u32 arr[10]={0}, Index_u8Array=10;
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2228      	movs	r2, #40	; 0x28
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fed3 	bl	80026b4 <memset>
 800090e:	230a      	movs	r3, #10
 8000910:	637b      	str	r3, [r7, #52]	; 0x34

	if (Copy_u16Number == 0){ CLCD_voidSendData('0'); }
 8000912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000916:	4313      	orrs	r3, r2
 8000918:	d123      	bne.n	8000962 <CLCD_voidPrintINTNumber+0x6c>
 800091a:	2030      	movs	r0, #48	; 0x30
 800091c:	f7ff fee2 	bl	80006e4 <CLCD_voidSendData>
		for (; Index_u8Array<=9 ; Index_u8Array++ )
		{
			CLCD_voidSendData(arr[Index_u8Array]);
		}
	}
}
 8000920:	e035      	b.n	800098e <CLCD_voidPrintINTNumber+0x98>
			arr[Index_u8Array-1]=(Copy_u16Number%10)+'0';
 8000922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000926:	f04f 020a 	mov.w	r2, #10
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	f7ff fc51 	bl	80001d4 <__aeabi_uldivmod>
 8000932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000934:	3b01      	subs	r3, #1
 8000936:	3230      	adds	r2, #48	; 0x30
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800093e:	440b      	add	r3, r1
 8000940:	f843 2c2c 	str.w	r2, [r3, #-44]
			Copy_u16Number=Copy_u16Number/10;
 8000944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000948:	f04f 020a 	mov.w	r2, #10
 800094c:	f04f 0300 	mov.w	r3, #0
 8000950:	f7ff fc40 	bl	80001d4 <__aeabi_uldivmod>
 8000954:	4602      	mov	r2, r0
 8000956:	460b      	mov	r3, r1
 8000958:	e9c7 2300 	strd	r2, r3, [r7]
			Index_u8Array--;
 800095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095e:	3b01      	subs	r3, #1
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
		while (Copy_u16Number != 0)
 8000962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000966:	4313      	orrs	r3, r2
 8000968:	d1db      	bne.n	8000922 <CLCD_voidPrintINTNumber+0x2c>
		for (; Index_u8Array<=9 ; Index_u8Array++ )
 800096a:	e00d      	b.n	8000988 <CLCD_voidPrintINTNumber+0x92>
			CLCD_voidSendData(arr[Index_u8Array]);
 800096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000974:	4413      	add	r3, r2
 8000976:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff feb1 	bl	80006e4 <CLCD_voidSendData>
		for (; Index_u8Array<=9 ; Index_u8Array++ )
 8000982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000984:	3301      	adds	r3, #1
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	2b09      	cmp	r3, #9
 800098c:	d9ee      	bls.n	800096c <CLCD_voidPrintINTNumber+0x76>
}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <CLCD_voidSendPuls>:
	MCL_STK_vDelay_ms(3);
}


void CLCD_voidSendPuls(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	/*FallingEdge*/
	MCL_GPIO_vAtomicSetPin(CLCD_CTRL_PORT , CLCD_E_PIN , PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	210d      	movs	r1, #13
 80009a0:	4807      	ldr	r0, [pc, #28]	; (80009c0 <CLCD_voidSendPuls+0x28>)
 80009a2:	f000 fc2e 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_STK_vDelay_ms(3);
 80009a6:	2003      	movs	r0, #3
 80009a8:	f000 fdbe 	bl	8001528 <MCL_STK_vDelay_ms>
	MCL_GPIO_vAtomicSetPin(CLCD_CTRL_PORT , CLCD_E_PIN , PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	210d      	movs	r1, #13
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <CLCD_voidSendPuls+0x28>)
 80009b2:	f000 fc26 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_STK_vDelay_ms(3);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 fdb6 	bl	8001528 <MCL_STK_vDelay_ms>
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020000 	.word	0x40020000

080009c4 <COR_NVIC_vEnableInterrupt>:
#include "../inc/BIT_MATH.h"
#include "../inc/CORE_NVIC_Interface.h"

void (*Global_NVICCallBackPtr)(void) = NULL;

void COR_NVIC_vEnableInterrupt(IRQ_Num_t Cp_xIRQId) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	if (Cp_xIRQId < 240) {
		NVIC->NVIC_ISER[Cp_xIRQId / 32] = (1 << (Cp_xIRQId % 32));
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	425a      	negs	r2, r3
 80009d4:	f003 031f 	and.w	r3, r3, #31
 80009d8:	f002 021f 	and.w	r2, r2, #31
 80009dc:	bf58      	it	pl
 80009de:	4253      	negpl	r3, r2
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	2301      	movs	r3, #1
 80009e6:	fa03 f102 	lsl.w	r1, r3, r2
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <COR_NVIC_vEnableInterrupt+0x48>)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	da00      	bge.n	80009f6 <COR_NVIC_vEnableInterrupt+0x32>
 80009f4:	331f      	adds	r3, #31
 80009f6:	115b      	asrs	r3, r3, #5
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <COR_NVIC_vSetPriority>:

void COR_NVIC_vSetPriorityCfg(NVIC_Grouping_t Cp_u8PriorityOption) {
	SCB->AIRCR = (VECTKEY << 16) | (Cp_u8PriorityOption << 8);
}

void COR_NVIC_vSetPriority(IRQ_Num_t Cp_xIRQId, u8 Cp_u8GroupId, u8 Cp_u8SubGroupId) {
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	717b      	strb	r3, [r7, #5]

	u8 Cp_u8PriorityId = (Cp_u8SubGroupId |
	                      (Cp_u8GroupId << ((READ_BITS(SCB->AIRCR, BIT8, THREE_BITS) + 1) - Group4_4Sub)));
 8000a22:	79ba      	ldrb	r2, [r7, #6]
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <COR_NVIC_vSetPriority+0x54>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
	u8 Cp_u8PriorityId = (Cp_u8SubGroupId |
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	73fb      	strb	r3, [r7, #15]
	NVIC->NVIC_IPR[Cp_xIRQId] = (Cp_u8PriorityId << 4);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <COR_NVIC_vSetPriority+0x58>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b292      	uxth	r2, r2
 8000a4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000a52:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <HAL_HCSR04_vInit>:
static volatile u16 HCSR04_Distance = 0;             /*!< Variable to store the distance measured by the HC-SR04 sensor. */
static volatile u16 t1 = 0;
static volatile u16 t2 = 0;
u32 HCSR04_OverFlow_Count = 0;       /*!< Variable to store the timer overflow count for the HC-SR04 sensor. */

void HAL_HCSR04_vInit(HCSR04_CfgType *HCSR04, TIM_HandleTypeDef *TMR_Handle) {
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
	// Initialize the GPIO pins
	GPIO_CfgType GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	801a      	strh	r2, [r3, #0]
 8000a80:	460a      	mov	r2, r1
 8000a82:	709a      	strb	r2, [r3, #2]

	/*Config pin Trig*/
	GPIO_InitStruct.GPIO_Pin = HCSR04->TRIG_Pin;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7c1b      	ldrb	r3, [r3, #16]
 8000a88:	733b      	strb	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Mode = GPIO_MODE_OUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_HIGH;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	73bb      	strb	r3, [r7, #14]

	MCL_GPIO_vSetPinCfg(HCSR04->TRIG_Port, &GPIO_InitStruct);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	f107 020c 	add.w	r2, r7, #12
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fae5 	bl	800106c <MCL_GPIO_vSetPinCfg>

	/*Config pin Echo*/
	GPIO_InitStruct.GPIO_Pin = HCSR04->ECHO_Pin;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	7a1b      	ldrb	r3, [r3, #8]
 8000aa6:	733b      	strb	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	73bb      	strb	r3, [r7, #14]

	MCL_GPIO_vSetPinCfg(HCSR04->ECHO_Port, &GPIO_InitStruct);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f107 020c 	add.w	r2, r7, #12
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fad6 	bl	800106c <MCL_GPIO_vSetPinCfg>

	MCL_GPIO_vSetPinAltFunc(HCSR04->ECHO_Port, GPIO_InitStruct.GPIO_Pin, GPIO_AF1_TIM1_TIM2);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	7b39      	ldrb	r1, [r7, #12]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fb72 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>

	/*--------[ Configure The HCSR04 IC Timer Channel ]-------*/
	TMR_Handle->Instance = HCSR04_CfgParam[HCSR04->Instance].TIM_Instance;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <HAL_HCSR04_vInit+0x100>)
 8000ad6:	2334      	movs	r3, #52	; 0x34
 8000ad8:	fb03 f301 	mul.w	r3, r3, r1
 8000adc:	4413      	add	r3, r2
 8000ade:	3314      	adds	r3, #20
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	601a      	str	r2, [r3, #0]
	TMR_Handle->Init.TIM_Mode = TIM_MODE_INPUT_CAPTURE;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2202      	movs	r2, #2
 8000aea:	711a      	strb	r2, [r3, #4]
	TMR_Handle->Init.TIM_Prescaler = HCSR04_CfgParam[HCSR04->Instance].TIM_CLK_MHz;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	4a1e      	ldr	r2, [pc, #120]	; (8000b6c <HAL_HCSR04_vInit+0x100>)
 8000af4:	2334      	movs	r3, #52	; 0x34
 8000af6:	fb03 f301 	mul.w	r3, r3, r1
 8000afa:	4413      	add	r3, r2
 8000afc:	3330      	adds	r3, #48	; 0x30
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	815a      	strh	r2, [r3, #10]
	TMR_Handle->Init.TIM_CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	739a      	strb	r2, [r3, #14]
	TMR_Handle->Init.TIM_Period = HCSR04->IC_Init.IC_Period;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	811a      	strh	r2, [r3, #8]
	TMR_Handle->Init.TIM_ClockDiv = 0;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	73da      	strb	r2, [r3, #15]
	TMR_Handle->Channel = HCSR04->IC_TIM_CH;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7e1a      	ldrb	r2, [r3, #24]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	751a      	strb	r2, [r3, #20]
	TMR_Handle->Init.TIM_INT = TIM_INT_CC1;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2202      	movs	r2, #2
 8000b28:	719a      	strb	r2, [r3, #6]

	HCSR04_CfgParam[HCSR04->Instance].IC_Init = TIM_IC_Config;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_HCSR04_vInit+0x100>)
 8000b32:	2334      	movs	r3, #52	; 0x34
 8000b34:	fb03 f301 	mul.w	r3, r3, r1
 8000b38:	4413      	add	r3, r2
 8000b3a:	3318      	adds	r3, #24
 8000b3c:	4a0c      	ldr	r2, [pc, #48]	; (8000b70 <HAL_HCSR04_vInit+0x104>)
 8000b3e:	1d1c      	adds	r4, r3, #4
 8000b40:	4615      	mov	r5, r2
 8000b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b46:	682b      	ldr	r3, [r5, #0]
 8000b48:	6023      	str	r3, [r4, #0]
	TIM_vInit(TMR_Handle);
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f000 fd50 	bl	80015f0 <TIM_vInit>
	TIM_IC_vInit(TMR_Handle, &HCSR04->IC_Init);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	331c      	adds	r3, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f000 fdf4 	bl	8001744 <TIM_IC_vInit>
	// Enable the timer interrupt
	TIM_vStart(TMR_Handle);
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	f000 fff7 	bl	8001b50 <TIM_vStart>
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bdb0      	pop	{r4, r5, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000058 	.word	0x20000058

08000b74 <HAL_HCSR04_TMR_OVF_ISR>:

void HAL_HCSR04_TMR_OVF_ISR(TIM_HandleTypeDef *htim) {
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	u8 i = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < HCSR04_INSTANCE_COUNT; i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e013      	b.n	8000bae <HAL_HCSR04_TMR_OVF_ISR+0x3a>
		if (htim->Instance == HCSR04_CfgParam[i].TIM_Instance) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <HAL_HCSR04_TMR_OVF_ISR+0x50>)
 8000b8e:	2034      	movs	r0, #52	; 0x34
 8000b90:	fb00 f303 	mul.w	r3, r0, r3
 8000b94:	440b      	add	r3, r1
 8000b96:	3314      	adds	r3, #20
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d104      	bne.n	8000ba8 <HAL_HCSR04_TMR_OVF_ISR+0x34>
			HCSR04_OverFlow_Count++;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_HCSR04_TMR_OVF_ISR+0x54>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <HAL_HCSR04_TMR_OVF_ISR+0x54>)
 8000ba6:	6013      	str	r3, [r2, #0]
	for (i = 0; i < HCSR04_INSTANCE_COUNT; i++) {
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0e8      	beq.n	8000b86 <HAL_HCSR04_TMR_OVF_ISR+0x12>
		}
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	200000c0 	.word	0x200000c0

08000bcc <HAL_HCSR04_TMR_IC_ISR>:

void HAL_HCSR04_TMR_IC_ISR(TIM_HandleTypeDef *htim) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	// Find the HCSR04 instance corresponding to the timer and channel
	u8 instance = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]
	u32 diff = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
	for (instance = 0; instance < HCSR04_INSTANCE_COUNT; instance++) 
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e07a      	b.n	8000cd8 <HAL_HCSR04_TMR_IC_ISR+0x10c>
	{
		if (htim->Instance == HCSR04_CfgParam[instance].TIM_Instance &&
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	493f      	ldr	r1, [pc, #252]	; (8000ce8 <HAL_HCSR04_TMR_IC_ISR+0x11c>)
 8000bea:	2034      	movs	r0, #52	; 0x34
 8000bec:	fb00 f303 	mul.w	r3, r0, r3
 8000bf0:	440b      	add	r3, r1
 8000bf2:	3314      	adds	r3, #20
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d16b      	bne.n	8000cd2 <HAL_HCSR04_TMR_IC_ISR+0x106>
				htim->Channel == HCSR04_CfgParam[instance].IC_Init.IC_Channel)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	7d1a      	ldrb	r2, [r3, #20]
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	4939      	ldr	r1, [pc, #228]	; (8000ce8 <HAL_HCSR04_TMR_IC_ISR+0x11c>)
 8000c02:	2034      	movs	r0, #52	; 0x34
 8000c04:	fb00 f303 	mul.w	r3, r0, r3
 8000c08:	440b      	add	r3, r1
 8000c0a:	331c      	adds	r3, #28
 8000c0c:	781b      	ldrb	r3, [r3, #0]
		if (htim->Instance == HCSR04_CfgParam[instance].TIM_Instance &&
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d15f      	bne.n	8000cd2 <HAL_HCSR04_TMR_IC_ISR+0x106>
		{

			// Check if a valid HCSR04 instance was found
			if (instance < HCSR04_INSTANCE_COUNT) 
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d15c      	bne.n	8000cd2 <HAL_HCSR04_TMR_IC_ISR+0x106>
			{

				static u8 edge_state = 0;

				if (edge_state == 0) 
 8000c18:	4b34      	ldr	r3, [pc, #208]	; (8000cec <HAL_HCSR04_TMR_IC_ISR+0x120>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d123      	bne.n	8000c68 <HAL_HCSR04_TMR_IC_ISR+0x9c>
				{
					// Capture T1 and reverse the ICU edge polarity
					t1 = TIM_u32ReadCapturedVal(htim, HCSR04_CfgParam[instance].IC_Init.IC_Channel);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <HAL_HCSR04_TMR_IC_ISR+0x11c>)
 8000c24:	2134      	movs	r1, #52	; 0x34
 8000c26:	fb01 f303 	mul.w	r3, r1, r3
 8000c2a:	4413      	add	r3, r2
 8000c2c:	331c      	adds	r3, #28
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f001 f808 	bl	8001c48 <TIM_u32ReadCapturedVal>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <HAL_HCSR04_TMR_IC_ISR+0x124>)
 8000c3e:	801a      	strh	r2, [r3, #0]

					edge_state = 1;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <HAL_HCSR04_TMR_IC_ISR+0x120>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]

					TIM_vSetClkPolarity(htim, HCSR04_CfgParam[instance].IC_Init.IC_Channel, TIM_CLOCKPOLARITY_FALLING);
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <HAL_HCSR04_TMR_IC_ISR+0x11c>)
 8000c4a:	2134      	movs	r1, #52	; 0x34
 8000c4c:	fb01 f303 	mul.w	r3, r1, r3
 8000c50:	4413      	add	r3, r2
 8000c52:	331c      	adds	r3, #28
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f001 f85a 	bl	8001d14 <TIM_vSetClkPolarity>

					HCSR04_OverFlow_Count = 0;
 8000c60:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_HCSR04_TMR_IC_ISR+0x128>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e034      	b.n	8000cd2 <HAL_HCSR04_TMR_IC_ISR+0x106>
				} 

				else if (edge_state == 1) 
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_HCSR04_TMR_IC_ISR+0x120>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d130      	bne.n	8000cd2 <HAL_HCSR04_TMR_IC_ISR+0x106>
				{
					// Capture T2 and calculate the distance
					t2 = TIM_u32ReadCapturedVal(htim, HCSR04_CfgParam[instance].IC_Init.IC_Channel);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <HAL_HCSR04_TMR_IC_ISR+0x11c>)
 8000c74:	2134      	movs	r1, #52	; 0x34
 8000c76:	fb01 f303 	mul.w	r3, r1, r3
 8000c7a:	4413      	add	r3, r2
 8000c7c:	331c      	adds	r3, #28
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 ffe0 	bl	8001c48 <TIM_u32ReadCapturedVal>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_HCSR04_TMR_IC_ISR+0x12c>)
 8000c8e:	801a      	strh	r2, [r3, #0]

					diff = (t2 - t1);
 8000c90:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_HCSR04_TMR_IC_ISR+0x12c>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_HCSR04_TMR_IC_ISR+0x124>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	60bb      	str	r3, [r7, #8]

					HCSR04_Distance = (diff / 58);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <HAL_HCSR04_TMR_IC_ISR+0x130>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_HCSR04_TMR_IC_ISR+0x134>)
 8000cb0:	801a      	strh	r2, [r3, #0]

					edge_state = 0;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_HCSR04_TMR_IC_ISR+0x120>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]

					TIM_vSetClkPolarity(htim, HCSR04_CfgParam[instance].IC_Init.IC_Channel, TIM_CLOCKPOLARITY_RISING);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_HCSR04_TMR_IC_ISR+0x11c>)
 8000cbc:	2134      	movs	r1, #52	; 0x34
 8000cbe:	fb01 f303 	mul.w	r3, r1, r3
 8000cc2:	4413      	add	r3, r2
 8000cc4:	331c      	adds	r3, #28
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f001 f821 	bl	8001d14 <TIM_vSetClkPolarity>
	for (instance = 0; instance < HCSR04_INSTANCE_COUNT; instance++) 
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d081      	beq.n	8000be2 <HAL_HCSR04_TMR_IC_ISR+0x16>
				}
			}
		}
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	200000c4 	.word	0x200000c4
 8000cf0:	200000ba 	.word	0x200000ba
 8000cf4:	200000c0 	.word	0x200000c0
 8000cf8:	200000bc 	.word	0x200000bc
 8000cfc:	8d3dcb09 	.word	0x8d3dcb09
 8000d00:	200000b8 	.word	0x200000b8

08000d04 <HAL_HCSR04_f32Read>:

u32 HAL_HCSR04_f32Read(u8 HCSR04_u8Instance)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]

	MCL_GPIO_vAtomicSetPin(HCSR04_CfgParam[HCSR04_u8Instance].TRIG_Port, HCSR04_CfgParam[HCSR04_u8Instance].TRIG_Pin,PIN_SET);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <HAL_HCSR04_f32Read+0x70>)
 8000d12:	2134      	movs	r1, #52	; 0x34
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	4413      	add	r3, r2
 8000d1a:	330c      	adds	r3, #12
 8000d1c:	6818      	ldr	r0, [r3, #0]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_HCSR04_f32Read+0x70>)
 8000d22:	2134      	movs	r1, #52	; 0x34
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	3310      	adds	r3, #16
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4619      	mov	r1, r3
 8000d32:	f000 fa66 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_STK_vDelay_us(5);
 8000d36:	2005      	movs	r0, #5
 8000d38:	f000 fb94 	bl	8001464 <MCL_STK_vDelay_us>
	MCL_GPIO_vAtomicSetPin(HCSR04_CfgParam[HCSR04_u8Instance].TRIG_Port, HCSR04_CfgParam[HCSR04_u8Instance].TRIG_Pin,PIN_RESET);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_HCSR04_f32Read+0x70>)
 8000d40:	2134      	movs	r1, #52	; 0x34
 8000d42:	fb01 f303 	mul.w	r3, r1, r3
 8000d46:	4413      	add	r3, r2
 8000d48:	330c      	adds	r3, #12
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_HCSR04_f32Read+0x70>)
 8000d50:	2134      	movs	r1, #52	; 0x34
 8000d52:	fb01 f303 	mul.w	r3, r1, r3
 8000d56:	4413      	add	r3, r2
 8000d58:	3310      	adds	r3, #16
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f000 fa4f 	bl	8001202 <MCL_GPIO_vAtomicSetPin>

	return HCSR04_Distance;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_HCSR04_f32Read+0x74>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b29b      	uxth	r3, r3
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000000 	.word	0x20000000
 8000d78:	200000b8 	.word	0x200000b8

08000d7c <IR_Init>:
/**
 * @brief Initializes the IR sensors.
 *
 * This function initializes the IR sensors by setting their GPIO pin modes.
 */
void IR_Init(void) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	MCL_GPIO_vSetPinMode(IR_PORT, IR_LEFT, GPIO_MODE_IN_PD, GPIO_SPEED_MEDIUM);  // Set the pin mode for the left IR sensor
 8000d80:	2301      	movs	r3, #1
 8000d82:	2210      	movs	r2, #16
 8000d84:	2101      	movs	r1, #1
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <IR_Init+0x20>)
 8000d88:	f000 f822 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(IR_PORT, IR_RIGHT, GPIO_MODE_IN_PD, GPIO_SPEED_MEDIUM); // Set the pin mode for the right IR sensor
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	2210      	movs	r2, #16
 8000d90:	2100      	movs	r1, #0
 8000d92:	4802      	ldr	r0, [pc, #8]	; (8000d9c <IR_Init+0x20>)
 8000d94:	f000 f81c 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020400 	.word	0x40020400

08000da0 <IR_u8Read_RightIR>:
/**
 * @brief Reads the value of the right IR sensor.
 *
 * @return The value of the right IR sensor (either HIGH or LOW).
 */
u8 IR_u8Read_RightIR(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	return MCL_GPIO_u8GetPinVal(IR_PORT, IR_RIGHT); // Return the value of the right IR sensor
 8000da4:	2100      	movs	r1, #0
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <IR_u8Read_RightIR+0x14>)
 8000da8:	f000 fa65 	bl	8001276 <MCL_GPIO_u8GetPinVal>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40020400 	.word	0x40020400

08000db8 <IR_u8Read_LeftIR>:
/**
 * @brief Reads the value of the left IR sensor.
 *
 * @return The value of the left IR sensor (either HIGH or LOW).
 */
u8 IR_u8Read_LeftIR(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	return MCL_GPIO_u8GetPinVal(IR_PORT, IR_LEFT); // Return the value of the left IR sensor
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <IR_u8Read_LeftIR+0x14>)
 8000dc0:	f000 fa59 	bl	8001276 <MCL_GPIO_u8GetPinVal>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <MCL_GPIO_vSetPinMode>:
		}
	}
}

void MCL_GPIO_vSetPinMode(GPIO_TypeDef *GPIOx, GPIO_Pin_t Cp_GPIO_Pin, GPIO_Mode_t Cp_GPIO_Mode,GPIO_Speed_t Cp_GPIO_Speed)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	70fb      	strb	r3, [r7, #3]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70bb      	strb	r3, [r7, #2]
 8000de6:	4613      	mov	r3, r2
 8000de8:	707b      	strb	r3, [r7, #1]

	MCL_RCC_vEnablePeriphClk(AHB1_BUS, GPIO_xSelectPortIndex(GPIOx));
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fa58 	bl	80012a0 <GPIO_xSelectPortIndex>
 8000df0:	4603      	mov	r3, r0
 8000df2:	4619      	mov	r1, r3
 8000df4:	2002      	movs	r0, #2
 8000df6:	f000 fabb 	bl	8001370 <MCL_RCC_vEnablePeriphClk>
	/* 1. Configure the GPIO port. */
	ASSIGN_BITS(GPIOx->GPIO_MODER, (Cp_GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Mode);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	0052      	lsls	r2, r2, #1
 8000e02:	2103      	movs	r1, #3
 8000e04:	fa01 f202 	lsl.w	r2, r1, r2
 8000e08:	43d2      	mvns	r2, r2
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	78b9      	ldrb	r1, [r7, #2]
 8000e0e:	78fa      	ldrb	r2, [r7, #3]
 8000e10:	0052      	lsls	r2, r2, #1
 8000e12:	4091      	lsls	r1, r2
 8000e14:	78fa      	ldrb	r2, [r7, #3]
 8000e16:	0052      	lsls	r2, r2, #1
 8000e18:	2003      	movs	r0, #3
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	400a      	ands	r2, r1
 8000e20:	431a      	orrs	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]
	/* 2. Configure the GPIO pull-up/pull-down. */
	if (Cp_GPIO_Mode == GPIO_MODE_IN_FLOAT || Cp_GPIO_Mode == GPIO_MODE_IN_PU || Cp_GPIO_Mode == GPIO_MODE_IN_PD ||Cp_GPIO_Mode == GPIO_MODE_AF_IN_PU || Cp_GPIO_Mode == GPIO_MODE_AF_IN_PD)
 8000e26:	78bb      	ldrb	r3, [r7, #2]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00b      	beq.n	8000e44 <MCL_GPIO_vSetPinMode+0x74>
 8000e2c:	78bb      	ldrb	r3, [r7, #2]
 8000e2e:	2b08      	cmp	r3, #8
 8000e30:	d008      	beq.n	8000e44 <MCL_GPIO_vSetPinMode+0x74>
 8000e32:	78bb      	ldrb	r3, [r7, #2]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d005      	beq.n	8000e44 <MCL_GPIO_vSetPinMode+0x74>
 8000e38:	78bb      	ldrb	r3, [r7, #2]
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d002      	beq.n	8000e44 <MCL_GPIO_vSetPinMode+0x74>
 8000e3e:	78bb      	ldrb	r3, [r7, #2]
 8000e40:	2b12      	cmp	r3, #18
 8000e42:	d119      	bne.n	8000e78 <MCL_GPIO_vSetPinMode+0xa8>
	{
		ASSIGN_BITS(GPIOx->GPIO_PUPDR, (Cp_GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Mode >> THREE_BITS);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	78fa      	ldrb	r2, [r7, #3]
 8000e4a:	0052      	lsls	r2, r2, #1
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e52:	43d2      	mvns	r2, r2
 8000e54:	4013      	ands	r3, r2
 8000e56:	78ba      	ldrb	r2, [r7, #2]
 8000e58:	08d2      	lsrs	r2, r2, #3
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	78fa      	ldrb	r2, [r7, #3]
 8000e60:	0052      	lsls	r2, r2, #1
 8000e62:	4091      	lsls	r1, r2
 8000e64:	78fa      	ldrb	r2, [r7, #3]
 8000e66:	0052      	lsls	r2, r2, #1
 8000e68:	2003      	movs	r0, #3
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	400a      	ands	r2, r1
 8000e70:	431a      	orrs	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60da      	str	r2, [r3, #12]
	else if (Cp_GPIO_Mode == GPIO_MODE_OUT_PP || Cp_GPIO_Mode == GPIO_MODE_OUT_OD ||Cp_GPIO_Mode == GPIO_MODE_AF_OUT_OD || Cp_GPIO_Mode == GPIO_MODE_AF_PP)
	{
		ASSIGN_BITS(GPIOx->GPIO_OTYPER, Cp_GPIO_Pin, ONE_BIT, Cp_GPIO_Mode >> TWO_BITS);
		ASSIGN_BITS(GPIOx->GPIO_OSPEEDR, (Cp_GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Speed);
	}
}
 8000e76:	e037      	b.n	8000ee8 <MCL_GPIO_vSetPinMode+0x118>
	else if (Cp_GPIO_Mode == GPIO_MODE_OUT_PP || Cp_GPIO_Mode == GPIO_MODE_OUT_OD ||Cp_GPIO_Mode == GPIO_MODE_AF_OUT_OD || Cp_GPIO_Mode == GPIO_MODE_AF_PP)
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d008      	beq.n	8000e90 <MCL_GPIO_vSetPinMode+0xc0>
 8000e7e:	78bb      	ldrb	r3, [r7, #2]
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d005      	beq.n	8000e90 <MCL_GPIO_vSetPinMode+0xc0>
 8000e84:	78bb      	ldrb	r3, [r7, #2]
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d002      	beq.n	8000e90 <MCL_GPIO_vSetPinMode+0xc0>
 8000e8a:	78bb      	ldrb	r3, [r7, #2]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d12b      	bne.n	8000ee8 <MCL_GPIO_vSetPinMode+0x118>
		ASSIGN_BITS(GPIOx->GPIO_OTYPER, Cp_GPIO_Pin, ONE_BIT, Cp_GPIO_Mode >> TWO_BITS);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	78fa      	ldrb	r2, [r7, #3]
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	78ba      	ldrb	r2, [r7, #2]
 8000ea2:	0892      	lsrs	r2, r2, #2
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	78fa      	ldrb	r2, [r7, #3]
 8000eae:	2001      	movs	r0, #1
 8000eb0:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	605a      	str	r2, [r3, #4]
		ASSIGN_BITS(GPIOx->GPIO_OSPEEDR, (Cp_GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Speed);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	78fa      	ldrb	r2, [r7, #3]
 8000ec2:	0052      	lsls	r2, r2, #1
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eca:	43d2      	mvns	r2, r2
 8000ecc:	4013      	ands	r3, r2
 8000ece:	7879      	ldrb	r1, [r7, #1]
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	0052      	lsls	r2, r2, #1
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	78fa      	ldrb	r2, [r7, #3]
 8000ed8:	0052      	lsls	r2, r2, #1
 8000eda:	2003      	movs	r0, #3
 8000edc:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <GPIO_voidSetPinMode>:

/**************************************************************************************/
/**************************************************************************************/
/**************************************************************************************/

void GPIO_voidSetPinMode(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinMode){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	460b      	mov	r3, r1
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortID)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d01e      	beq.n	8000f46 <GPIO_voidSetPinMode+0x56>
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	dc28      	bgt.n	8000f5e <GPIO_voidSetPinMode+0x6e>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d002      	beq.n	8000f16 <GPIO_voidSetPinMode+0x26>
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d00c      	beq.n	8000f2e <GPIO_voidSetPinMode+0x3e>
	case GPIO_PORTA:GPIOA->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
	case GPIO_PORTB:GPIOB->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
	case GPIO_PORTC:GPIOC->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;

	}
}
 8000f14:	e023      	b.n	8000f5e <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTA:GPIOA->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <GPIO_voidSetPinMode+0x7c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	7979      	ldrb	r1, [r7, #5]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	0052      	lsls	r2, r2, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4611      	mov	r1, r2
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <GPIO_voidSetPinMode+0x7c>)
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	e017      	b.n	8000f5e <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:GPIOB->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <GPIO_voidSetPinMode+0x80>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	7979      	ldrb	r1, [r7, #5]
 8000f34:	79ba      	ldrb	r2, [r7, #6]
 8000f36:	0052      	lsls	r2, r2, #1
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <GPIO_voidSetPinMode+0x80>)
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6013      	str	r3, [r2, #0]
 8000f44:	e00b      	b.n	8000f5e <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:GPIOC->GPIO_MODER|= (Copy_u8PinMode << ( Copy_u8PinID * 2))	;break;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <GPIO_voidSetPinMode+0x84>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	7979      	ldrb	r1, [r7, #5]
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	0052      	lsls	r2, r2, #1
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <GPIO_voidSetPinMode+0x84>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	bf00      	nop
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800

08000f78 <GPIO_voidSetPinALTF>:


void GPIO_voidSetPinALTF(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinALTF)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
 8000f82:	460b      	mov	r3, r1
 8000f84:	71bb      	strb	r3, [r7, #6]
 8000f86:	4613      	mov	r3, r2
 8000f88:	717b      	strb	r3, [r7, #5]


	if(Copy_u8PinID>=0 && Copy_u8PinID<8)
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	2b07      	cmp	r3, #7
 8000f8e:	d82d      	bhi.n	8000fec <GPIO_voidSetPinALTF+0x74>
	{
		switch(Copy_u8PortID)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d01e      	beq.n	8000fd4 <GPIO_voidSetPinALTF+0x5c>
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	dc5c      	bgt.n	8001054 <GPIO_voidSetPinALTF+0xdc>
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <GPIO_voidSetPinALTF+0x2c>
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d00c      	beq.n	8000fbc <GPIO_voidSetPinALTF+0x44>
		case GPIO_PORTC: GPIOC->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;

		}
	}

}
 8000fa2:	e057      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTA:GPIOA->GPIO_AFR[0]|=(u32)(Copy_u8PinALTF<<(4*Copy_u8PinID));break;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <GPIO_voidSetPinALTF+0xe8>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	7979      	ldrb	r1, [r7, #5]
 8000faa:	79ba      	ldrb	r2, [r7, #6]
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <GPIO_voidSetPinALTF+0xe8>)
 8000fb6:	430b      	orrs	r3, r1
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	e04b      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTB:GPIOB->GPIO_AFR[0]|=(u32)(Copy_u8PinALTF<<(4*Copy_u8PinID));break;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <GPIO_voidSetPinALTF+0xec>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	7979      	ldrb	r1, [r7, #5]
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <GPIO_voidSetPinALTF+0xec>)
 8000fce:	430b      	orrs	r3, r1
 8000fd0:	6213      	str	r3, [r2, #32]
 8000fd2:	e03f      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTC:GPIOC->GPIO_AFR[0]|=(u32)(Copy_u8PinALTF<<(4*Copy_u8PinID));break;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <GPIO_voidSetPinALTF+0xf0>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	7979      	ldrb	r1, [r7, #5]
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4a20      	ldr	r2, [pc, #128]	; (8001068 <GPIO_voidSetPinALTF+0xf0>)
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	6213      	str	r3, [r2, #32]
 8000fea:	e033      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		switch(Copy_u8PortID)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d022      	beq.n	8001038 <GPIO_voidSetPinALTF+0xc0>
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	dc2e      	bgt.n	8001054 <GPIO_voidSetPinALTF+0xdc>
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <GPIO_voidSetPinALTF+0x88>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d00e      	beq.n	800101c <GPIO_voidSetPinALTF+0xa4>
}
 8000ffe:	e029      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTA :GPIOA->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <GPIO_voidSetPinALTF+0xe8>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	7979      	ldrb	r1, [r7, #5]
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	f002 0207 	and.w	r2, r2, #7
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	4611      	mov	r1, r2
 8001014:	4a12      	ldr	r2, [pc, #72]	; (8001060 <GPIO_voidSetPinALTF+0xe8>)
 8001016:	430b      	orrs	r3, r1
 8001018:	6253      	str	r3, [r2, #36]	; 0x24
 800101a:	e01b      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTB: GPIOB->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <GPIO_voidSetPinALTF+0xec>)
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	7979      	ldrb	r1, [r7, #5]
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	f002 0207 	and.w	r2, r2, #7
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	4611      	mov	r1, r2
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <GPIO_voidSetPinALTF+0xec>)
 8001032:	430b      	orrs	r3, r1
 8001034:	6253      	str	r3, [r2, #36]	; 0x24
 8001036:	e00d      	b.n	8001054 <GPIO_voidSetPinALTF+0xdc>
		case GPIO_PORTC: GPIOC->GPIO_AFR[1]|=(u32)(Copy_u8PinALTF<<(4*(Copy_u8PinID %8)));break;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <GPIO_voidSetPinALTF+0xf0>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	7979      	ldrb	r1, [r7, #5]
 800103e:	79ba      	ldrb	r2, [r7, #6]
 8001040:	f002 0207 	and.w	r2, r2, #7
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	fa01 f202 	lsl.w	r2, r1, r2
 800104a:	4611      	mov	r1, r2
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <GPIO_voidSetPinALTF+0xf0>)
 800104e:	430b      	orrs	r3, r1
 8001050:	6253      	str	r3, [r2, #36]	; 0x24
 8001052:	bf00      	nop
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40020000 	.word	0x40020000
 8001064:	40020400 	.word	0x40020400
 8001068:	40020800 	.word	0x40020800

0800106c <MCL_GPIO_vSetPinCfg>:
/**************************************************************************************/
/**************************************************************************************/



void MCL_GPIO_vSetPinCfg(GPIO_TypeDef *GPIOx, GPIO_CfgType *Cp_GPIO_Cfg) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]

	MCL_RCC_vEnablePeriphClk(AHB1_BUS, GPIO_xSelectPortIndex(GPIOx));
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f912 	bl	80012a0 <GPIO_xSelectPortIndex>
 800107c:	4603      	mov	r3, r0
 800107e:	4619      	mov	r1, r3
 8001080:	2002      	movs	r0, #2
 8001082:	f000 f975 	bl	8001370 <MCL_RCC_vEnablePeriphClk>
	/* 1. Configure the GPIO port. */
	ASSIGN_BITS(GPIOx->GPIO_MODER, (Cp_GPIO_Cfg->GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Cfg->GPIO_Mode);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	2103      	movs	r1, #3
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	43d2      	mvns	r2, r2
 8001098:	4013      	ands	r3, r2
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	7852      	ldrb	r2, [r2, #1]
 800109e:	4611      	mov	r1, r2
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	0052      	lsls	r2, r2, #1
 80010a6:	4091      	lsls	r1, r2
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	0052      	lsls	r2, r2, #1
 80010ae:	2003      	movs	r0, #3
 80010b0:	fa00 f202 	lsl.w	r2, r0, r2
 80010b4:	400a      	ands	r2, r1
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
	/* 2. Configure the GPIO pull-up/pull-down. */
	if (Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_FLOAT || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_PU ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	785b      	ldrb	r3, [r3, #1]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00f      	beq.n	80010e4 <MCL_GPIO_vSetPinCfg+0x78>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d00b      	beq.n	80010e4 <MCL_GPIO_vSetPinCfg+0x78>
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_PD || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_IN_PU ||
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	785b      	ldrb	r3, [r3, #1]
	if (Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_FLOAT || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_PU ||
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d007      	beq.n	80010e4 <MCL_GPIO_vSetPinCfg+0x78>
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_PD || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_IN_PU ||
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	2b0a      	cmp	r3, #10
 80010da:	d003      	beq.n	80010e4 <MCL_GPIO_vSetPinCfg+0x78>
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_IN_PD) {
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	785b      	ldrb	r3, [r3, #1]
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_IN_PD || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_IN_PU ||
 80010e0:	2b12      	cmp	r3, #18
 80010e2:	d11d      	bne.n	8001120 <MCL_GPIO_vSetPinCfg+0xb4>
		ASSIGN_BITS(GPIOx->GPIO_PUPDR, (Cp_GPIO_Cfg->GPIO_Pin * TWO_BITS), TWO_BITS,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	7812      	ldrb	r2, [r2, #0]
 80010ec:	0052      	lsls	r2, r2, #1
 80010ee:	2103      	movs	r1, #3
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	43d2      	mvns	r2, r2
 80010f6:	4013      	ands	r3, r2
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	7852      	ldrb	r2, [r2, #1]
 80010fc:	08d2      	lsrs	r2, r2, #3
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	4611      	mov	r1, r2
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	4091      	lsls	r1, r2
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0052      	lsls	r2, r2, #1
 8001110:	2003      	movs	r0, #3
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	400a      	ands	r2, r1
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_OUT_OD || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_PP) {

		ASSIGN_BITS(GPIOx->GPIO_OTYPER, Cp_GPIO_Cfg->GPIO_Pin, ONE_BIT, Cp_GPIO_Cfg->GPIO_Mode >> TWO_BITS);
		ASSIGN_BITS(GPIOx->GPIO_OSPEEDR, (Cp_GPIO_Cfg->GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Cfg->GPIO_Speed);
	}
}
 800111e:	e044      	b.n	80011aa <MCL_GPIO_vSetPinCfg+0x13e>
	else if (Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_OUT_PP || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_OUT_OD ||
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d00b      	beq.n	8001140 <MCL_GPIO_vSetPinCfg+0xd4>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	2b05      	cmp	r3, #5
 800112e:	d007      	beq.n	8001140 <MCL_GPIO_vSetPinCfg+0xd4>
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_OUT_OD || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_PP) {
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	785b      	ldrb	r3, [r3, #1]
	else if (Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_OUT_PP || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_OUT_OD ||
 8001134:	2b06      	cmp	r3, #6
 8001136:	d003      	beq.n	8001140 <MCL_GPIO_vSetPinCfg+0xd4>
			Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_OUT_OD || Cp_GPIO_Cfg->GPIO_Mode == GPIO_MODE_AF_PP) {
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d134      	bne.n	80011aa <MCL_GPIO_vSetPinCfg+0x13e>
		ASSIGN_BITS(GPIOx->GPIO_OTYPER, Cp_GPIO_Cfg->GPIO_Pin, ONE_BIT, Cp_GPIO_Cfg->GPIO_Mode >> TWO_BITS);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	4611      	mov	r1, r2
 800114a:	2201      	movs	r2, #1
 800114c:	408a      	lsls	r2, r1
 800114e:	43d2      	mvns	r2, r2
 8001150:	4013      	ands	r3, r2
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	7852      	ldrb	r2, [r2, #1]
 8001156:	0892      	lsrs	r2, r2, #2
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	4611      	mov	r1, r2
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	7812      	ldrb	r2, [r2, #0]
 8001160:	4091      	lsls	r1, r2
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	4610      	mov	r0, r2
 8001168:	2201      	movs	r2, #1
 800116a:	4082      	lsls	r2, r0
 800116c:	400a      	ands	r2, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	605a      	str	r2, [r3, #4]
		ASSIGN_BITS(GPIOx->GPIO_OSPEEDR, (Cp_GPIO_Cfg->GPIO_Pin * TWO_BITS), TWO_BITS, Cp_GPIO_Cfg->GPIO_Speed);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	0052      	lsls	r2, r2, #1
 800117e:	2103      	movs	r1, #3
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	43d2      	mvns	r2, r2
 8001186:	4013      	ands	r3, r2
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	7892      	ldrb	r2, [r2, #2]
 800118c:	4611      	mov	r1, r2
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	0052      	lsls	r2, r2, #1
 8001194:	4091      	lsls	r1, r2
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	0052      	lsls	r2, r2, #1
 800119c:	2003      	movs	r0, #3
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	400a      	ands	r2, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	609a      	str	r2, [r3, #8]
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <MCL_GPIO_vSetPinAltFunc>:

void MCL_GPIO_vSetPinAltFunc(GPIO_TypeDef *GPIOx, GPIO_Pin_t Cp_PinId, GPIO_AF_TypeDef Cp_AltFunc) {
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	4613      	mov	r3, r2
 80011c0:	70bb      	strb	r3, [r7, #2]
	// AFR[0] - Alternate function Low register
	// AFR[1] - Alternate function High register
	if (Cp_PinId <= 7) {
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	d80a      	bhi.n	80011de <MCL_GPIO_vSetPinAltFunc+0x2c>
		GPIOx->GPIO_AFR[0] |= (Cp_AltFunc << (4 * Cp_PinId));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	78b9      	ldrb	r1, [r7, #2]
 80011ce:	78fa      	ldrb	r2, [r7, #3]
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	621a      	str	r2, [r3, #32]
	} else {
		GPIOx->GPIO_AFR[1] |= (Cp_AltFunc << (4 * (Cp_PinId % 8)));
	}
}
 80011dc:	e00b      	b.n	80011f6 <MCL_GPIO_vSetPinAltFunc+0x44>
		GPIOx->GPIO_AFR[1] |= (Cp_AltFunc << (4 * (Cp_PinId % 8)));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	78b9      	ldrb	r1, [r7, #2]
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	f002 0207 	and.w	r2, r2, #7
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	fa01 f202 	lsl.w	r2, r1, r2
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <MCL_GPIO_vAtomicSetPin>:

void MCL_GPIO_vAtomicSetPin(GPIO_TypeDef *GPIOx, GPIO_Pin_t Cp_PinId, Pin_State_t Cp_xPinVal) {
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]
 800120e:	4613      	mov	r3, r2
 8001210:	70bb      	strb	r3, [r7, #2]
	if (Cp_PinId < GPIO_PIN0 && Cp_PinId > GPIO_PIN15) {
		/* Do nothing */
	} else {
		switch (Cp_xPinVal) {
 8001212:	78bb      	ldrb	r3, [r7, #2]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <MCL_GPIO_vAtomicSetPin+0x3e>
 8001218:	2b01      	cmp	r3, #1
 800121a:	d125      	bne.n	8001268 <MCL_GPIO_vAtomicSetPin+0x66>
		case PIN_SET:
			ASSIGN_BIT(GPIOx->GPIO_BSRR_Bits.BS, Cp_PinId, PIN_SET);
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2201      	movs	r2, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	b21a      	sxth	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	b29b      	uxth	r3, r3
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	b299      	uxth	r1, r3
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	6993      	ldr	r3, [r2, #24]
 8001238:	f361 030f 	bfi	r3, r1, #0, #16
 800123c:	6193      	str	r3, [r2, #24]
			break;
 800123e:	e014      	b.n	800126a <MCL_GPIO_vAtomicSetPin+0x68>
		case PIN_RESET:
			ASSIGN_BIT(GPIOx->GPIO_BSRR_Bits.BR, Cp_PinId, PIN_SET);
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	2201      	movs	r2, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	b21a      	sxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001252:	b29b      	uxth	r3, r3
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21b      	sxth	r3, r3
 800125a:	b299      	uxth	r1, r3
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6993      	ldr	r3, [r2, #24]
 8001260:	f361 431f 	bfi	r3, r1, #16, #16
 8001264:	6193      	str	r3, [r2, #24]
			break;
 8001266:	e000      	b.n	800126a <MCL_GPIO_vAtomicSetPin+0x68>
		default:
			break;
 8001268:	bf00      	nop
		}
	}
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <MCL_GPIO_u8GetPinVal>:
	} else {
		TOGGLE_BIT(GPIOx->GPIO_ODR, Cp_PinId);
	}
}

u8 MCL_GPIO_u8GetPinVal(GPIO_TypeDef *GPIOx, GPIO_Pin_t Cp_PinId) {
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	460b      	mov	r3, r1
 8001280:	70fb      	strb	r3, [r7, #3]
	if (Cp_PinId < GPIO_PIN0 && Cp_PinId > GPIO_PIN15) {
		return -1;
	} else {
		return (GET_BIT(GPIOx->GPIO_IDR, Cp_PinId));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
	}
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <GPIO_xSelectPortIndex>:

u32 MCL_GPIO_u32ReadPort(GPIO_TypeDef *GPIOx) {
	return READ_REG(GPIOx->GPIO_IDR);
}

GPIO_Port_t GPIO_xSelectPortIndex(GPIO_TypeDef *GPIOx) {
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	u32 Local_PortOffset = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
	Local_PortOffset = (u32) ((u32) GPIOx - (u32) GPIOA);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80012b2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80012b6:	60fb      	str	r3, [r7, #12]
	return ((GPIO_Port_t) (Local_PortOffset / 0x400));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	0a9b      	lsrs	r3, r3, #10
 80012bc:	b2db      	uxtb	r3, r3
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <MCL_RCC_vInitSysClk>:

const u8 APBPrescTable[8U] = {0, 0, 0, 0, 1, 2, 3, 4}; //shift right by 1 = divide by 2;

const u8 AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9}; //shift right by 1 = divide by 2;

void MCL_RCC_vInitSysClk(RCC_CfgType *Cp_xRCC_Cfg) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	/********Enable All System Clocks***********/
	RCC->RCC_CR.HSION = 1;
 80012d4:	4a25      	ldr	r2, [pc, #148]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 80012d6:	6813      	ldr	r3, [r2, #0]
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6013      	str	r3, [r2, #0]
	RCC->RCC_CR.HSEON = 1;
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
	RCC->RCC_CR.PLLON = 1;
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f0:	6013      	str	r3, [r2, #0]

	/************Select System Clock***********/
	RCC->RCC_CFGR_bits.SWn = Cp_xRCC_Cfg->System_ClkSelection;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	b2d9      	uxtb	r1, r3
 80012fe:	6893      	ldr	r3, [r2, #8]
 8001300:	f361 0301 	bfi	r3, r1, #0, #2
 8001304:	6093      	str	r3, [r2, #8]
	/************Select System Clock Type***********/
	RCC->RCC_CR.HSEBYP = Cp_xRCC_Cfg->System_ClkType;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7a9b      	ldrb	r3, [r3, #10]
 800130a:	4a18      	ldr	r2, [pc, #96]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2d9      	uxtb	r1, r3
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	f361 4392 	bfi	r3, r1, #18, #1
 8001318:	6013      	str	r3, [r2, #0]
	switch (Cp_xRCC_Cfg->System_ClkSelection) {
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d01c      	beq.n	800135c <MCL_RCC_vInitSysClk+0x90>
 8001322:	2b02      	cmp	r3, #2
 8001324:	dc1b      	bgt.n	800135e <MCL_RCC_vInitSysClk+0x92>
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <MCL_RCC_vInitSysClk+0x64>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d00b      	beq.n	8001346 <MCL_RCC_vInitSysClk+0x7a>
			RCC->RCC_CFGR_bits.RTCPRE = Cp_xRCC_Cfg->System_ClkPrescaler;
			break;
		case PLL_CLOCK:
			break;
	}
}
 800132e:	e016      	b.n	800135e <MCL_RCC_vInitSysClk+0x92>
			RCC->RCC_CFGR_bits.HPRE = Cp_xRCC_Cfg->System_ClkPrescaler;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	891b      	ldrh	r3, [r3, #8]
 8001334:	4a0d      	ldr	r2, [pc, #52]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	b2d9      	uxtb	r1, r3
 800133c:	6893      	ldr	r3, [r2, #8]
 800133e:	f361 1307 	bfi	r3, r1, #4, #4
 8001342:	6093      	str	r3, [r2, #8]
			break;
 8001344:	e00b      	b.n	800135e <MCL_RCC_vInitSysClk+0x92>
			RCC->RCC_CFGR_bits.RTCPRE = Cp_xRCC_Cfg->System_ClkPrescaler;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	891b      	ldrh	r3, [r3, #8]
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <MCL_RCC_vInitSysClk+0xa0>)
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	b2d9      	uxtb	r1, r3
 8001352:	6893      	ldr	r3, [r2, #8]
 8001354:	f361 4314 	bfi	r3, r1, #16, #5
 8001358:	6093      	str	r3, [r2, #8]
			break;
 800135a:	e000      	b.n	800135e <MCL_RCC_vInitSysClk+0x92>
			break;
 800135c:	bf00      	nop
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <MCL_RCC_vEnablePeriphClk>:

void MCL_RCC_vEnablePeriphClk(SysBus_t Cp_u8Bus, u8 Cp_u8Periph) {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	460a      	mov	r2, r1
 800137a:	71fb      	strb	r3, [r7, #7]
 800137c:	4613      	mov	r3, r2
 800137e:	71bb      	strb	r3, [r7, #6]
	switch (Cp_u8Bus) {
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d836      	bhi.n	80013f4 <MCL_RCC_vEnablePeriphClk+0x84>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <MCL_RCC_vEnablePeriphClk+0x1c>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	080013c9 	.word	0x080013c9
 8001390:	080013df 	.word	0x080013df
 8001394:	0800139d 	.word	0x0800139d
 8001398:	080013b3 	.word	0x080013b3
		case AHB1_BUS  :
			SET_BIT(RCC->RCC_AHB1ENR, Cp_u8Periph);
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	79ba      	ldrb	r2, [r7, #6]
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4611      	mov	r1, r2
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 80013b0:	e021      	b.n	80013f6 <MCL_RCC_vEnablePeriphClk+0x86>
		case AHB2_BUS  :
			SET_BIT(RCC->RCC_AHB2ENR, Cp_u8Periph);
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	79ba      	ldrb	r2, [r7, #6]
 80013b8:	2101      	movs	r1, #1
 80013ba:	fa01 f202 	lsl.w	r2, r1, r2
 80013be:	4611      	mov	r1, r2
 80013c0:	4a10      	ldr	r2, [pc, #64]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013c2:	430b      	orrs	r3, r1
 80013c4:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80013c6:	e016      	b.n	80013f6 <MCL_RCC_vEnablePeriphClk+0x86>
		case APB1_BUS  :
			SET_BIT(RCC->RCC_APB1ENR, Cp_u8Periph);
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	79ba      	ldrb	r2, [r7, #6]
 80013ce:	2101      	movs	r1, #1
 80013d0:	fa01 f202 	lsl.w	r2, r1, r2
 80013d4:	4611      	mov	r1, r2
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013d8:	430b      	orrs	r3, r1
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 80013dc:	e00b      	b.n	80013f6 <MCL_RCC_vEnablePeriphClk+0x86>
		case APB2_BUS  :
			SET_BIT(RCC->RCC_APB2ENR, Cp_u8Periph);
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	79ba      	ldrb	r2, [r7, #6]
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	4611      	mov	r1, r2
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <MCL_RCC_vEnablePeriphClk+0x94>)
 80013ee:	430b      	orrs	r3, r1
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 80013f2:	e000      	b.n	80013f6 <MCL_RCC_vEnablePeriphClk+0x86>
		default    : /* ERROR*/         break;
 80013f4:	bf00      	nop
	}
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <MCL_STK_vInit>:
#include "../inc/MCAL_STK_Interface.h"
#include "../inc/MCAL_STK_Private.h"

void (*Global_STKCallBackPtr)(void) = NULL_PTR;

void MCL_STK_vInit(STK_CfgType *Cp_STK_Cfg) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	/* Disable SysTick */
	STK->STK_CTRL = 0;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MCL_STK_vInit+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
	STK->STK_CTRL_Bits.CLKSOURCE = Cp_STK_Cfg->SysTick_ClkSrc;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4a10      	ldr	r2, [pc, #64]	; (800145c <MCL_STK_vInit+0x54>)
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	b2d9      	uxtb	r1, r3
 8001422:	6813      	ldr	r3, [r2, #0]
 8001424:	f361 0382 	bfi	r3, r1, #2, #1
 8001428:	6013      	str	r3, [r2, #0]

	if (Cp_STK_Cfg->SysTick_Exception != DISABLE_EXCEPTION) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	785b      	ldrb	r3, [r3, #1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00d      	beq.n	800144e <MCL_STK_vInit+0x46>
		if (Cp_STK_Cfg->Systick_CallBackPtr != NULL_PTR)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <MCL_STK_vInit+0x3c>
			Global_STKCallBackPtr = Cp_STK_Cfg->Systick_CallBackPtr;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <MCL_STK_vInit+0x58>)
 8001440:	6013      	str	r3, [r2, #0]
		else
			STK->STK_CTRL_Bits.TICKINT = DISABLE_STATE;
	}
}
 8001442:	e004      	b.n	800144e <MCL_STK_vInit+0x46>
			STK->STK_CTRL_Bits.TICKINT = DISABLE_STATE;
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <MCL_STK_vInit+0x54>)
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f36f 0341 	bfc	r3, #1, #1
 800144c:	6013      	str	r3, [r2, #0]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010
 8001460:	200000d0 	.word	0x200000d0

08001464 <MCL_STK_vDelay_us>:

void MCL_STK_vDelay_us(u32 Cp_u32Ticks) {
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	u32 Lc_Delay_us = Cp_u32Ticks * 2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	613b      	str	r3, [r7, #16]
	u32 Lc_ValSave = STK->STK_VAL;
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	617b      	str	r3, [r7, #20]
	u32 Lc_CtrlSave = STK->STK_CTRL;
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

	// Disable SysTick and interrupts
	STK->STK_CTRL_Bits.ENABLE = DISABLE_STATE;
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 8001480:	6813      	ldr	r3, [r2, #0]
 8001482:	f36f 0300 	bfc	r3, #0, #1
 8001486:	6013      	str	r3, [r2, #0]
	STK->STK_CTRL_Bits.TICKINT = DISABLE_STATE;
 8001488:	4a25      	ldr	r2, [pc, #148]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	f36f 0341 	bfc	r3, #1, #1
 8001490:	6013      	str	r3, [r2, #0]

	STK->STK_LOAD = (Lc_Delay_us);    //Tick = 1us
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	6053      	str	r3, [r2, #4]
	STK->STK_VAL = 0;
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]

	STK->STK_CTRL_Bits.ENABLE = ENABLE_STATE;
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 80014a0:	6813      	ldr	r3, [r2, #0]
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6013      	str	r3, [r2, #0]

	while (STK->STK_CTRL_Bits.COUNTFLAG != 1);
 80014a8:	bf00      	nop
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f3c3 4300 	ubfx	r3, r3, #16, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1f8      	bne.n	80014aa <MCL_STK_vDelay_us+0x46>

	// Calculate elapsed time and adjust saved value
	u32 Lc_ElapsedTicks = Lc_ValSave - STK->STK_VAL;
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	60bb      	str	r3, [r7, #8]
	if (Lc_ValSave > Lc_ElapsedTicks) {
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d904      	bls.n	80014d4 <MCL_STK_vDelay_us+0x70>
		Lc_ValSave -= Lc_ElapsedTicks;
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	e001      	b.n	80014d8 <MCL_STK_vDelay_us+0x74>
	} else {
		Lc_ValSave = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
	}

	// Disable SysTick
	if (STK_G_Config.SysTick_Exception == DISABLE_EXCEPTION) {
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MCL_STK_vDelay_us+0xc0>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10b      	bne.n	80014f8 <MCL_STK_vDelay_us+0x94>
		STK->STK_CTRL_Bits.ENABLE = DISABLE_STATE;
 80014e0:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f36f 0300 	bfc	r3, #0, #1
 80014e8:	6013      	str	r3, [r2, #0]
		STK->STK_LOAD = 0;
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
		STK->STK_VAL = 0;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
		STK->STK_VAL = 0;

		// Restore SysTick control register
		STK->STK_CTRL = Lc_CtrlSave;
	}    //Tick = 1us
}
 80014f6:	e00c      	b.n	8001512 <MCL_STK_vDelay_us+0xae>
	} else if (STK_G_Config.SysTick_Exception == ENABLE_PERIODIC_EXCEPTION) {
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <MCL_STK_vDelay_us+0xc0>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d108      	bne.n	8001512 <MCL_STK_vDelay_us+0xae>
		STK->STK_LOAD = Lc_ValSave;
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	6053      	str	r3, [r2, #4]
		STK->STK_VAL = 0;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
		STK->STK_CTRL = Lc_CtrlSave;
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <MCL_STK_vDelay_us+0xbc>)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010
 8001524:	200000c8 	.word	0x200000c8

08001528 <MCL_STK_vDelay_ms>:

void MCL_STK_vDelay_ms(u32 Cp_u32Ticks) {
 8001528:	b480      	push	{r7}
 800152a:	b087      	sub	sp, #28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	u32 Lc_Delay_ms = (Cp_u32Ticks * 2000);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	613b      	str	r3, [r7, #16]
	u32 Lc_ValSave = STK->STK_VAL;
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	617b      	str	r3, [r7, #20]
	u32 Lc_CtrlSave = STK->STK_CTRL;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]

	// Disable SysTick and interrupts
	STK->STK_CTRL_Bits.ENABLE = DISABLE_STATE;
 8001548:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 800154a:	6813      	ldr	r3, [r2, #0]
 800154c:	f36f 0300 	bfc	r3, #0, #1
 8001550:	6013      	str	r3, [r2, #0]
	STK->STK_CTRL_Bits.TICKINT = DISABLE_STATE;
 8001552:	4a25      	ldr	r2, [pc, #148]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f36f 0341 	bfc	r3, #1, #1
 800155a:	6013      	str	r3, [r2, #0]

	STK->STK_LOAD = (Lc_Delay_ms);    //Tick = 1us
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	6053      	str	r3, [r2, #4]
	STK->STK_VAL = 0;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]

	STK->STK_CTRL_Bits.ENABLE = ENABLE_STATE;
 8001568:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]


	while (STK->STK_CTRL_Bits.COUNTFLAG != 1);
 8001572:	bf00      	nop
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f3c3 4300 	ubfx	r3, r3, #16, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1f8      	bne.n	8001574 <MCL_STK_vDelay_ms+0x4c>

	// Calculate elapsed time and adjust saved value
	u32 Lc_ElapsedTicks = Lc_ValSave - STK->STK_VAL;
 8001582:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	60bb      	str	r3, [r7, #8]
	if (Lc_ValSave > Lc_ElapsedTicks) {
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d904      	bls.n	800159e <MCL_STK_vDelay_ms+0x76>
		Lc_ValSave -= Lc_ElapsedTicks;
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	e001      	b.n	80015a2 <MCL_STK_vDelay_ms+0x7a>
	} else {
		Lc_ValSave = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
	}
	// Disable SysTick
	if (STK_G_Config.SysTick_Exception == DISABLE_EXCEPTION) {
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MCL_STK_vDelay_ms+0xc4>)
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10b      	bne.n	80015c2 <MCL_STK_vDelay_ms+0x9a>
		STK->STK_CTRL_Bits.ENABLE = DISABLE_STATE;
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 80015ac:	6813      	ldr	r3, [r2, #0]
 80015ae:	f36f 0300 	bfc	r3, #0, #1
 80015b2:	6013      	str	r3, [r2, #0]
		STK->STK_LOAD = 0;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
		STK->STK_VAL = 0;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
		STK->STK_LOAD = (Lc_ValSave);
		STK->STK_VAL = 0;
		// Restore SysTick control register
		STK->STK_CTRL = Lc_CtrlSave;
	}
}
 80015c0:	e00c      	b.n	80015dc <MCL_STK_vDelay_ms+0xb4>
	} else if (STK_G_Config.SysTick_Exception == ENABLE_PERIODIC_EXCEPTION)        //these is periodic interval
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <MCL_STK_vDelay_ms+0xc4>)
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d108      	bne.n	80015dc <MCL_STK_vDelay_ms+0xb4>
		STK->STK_LOAD = (Lc_ValSave);
 80015ca:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	6053      	str	r3, [r2, #4]
		STK->STK_VAL = 0;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
		STK->STK_CTRL = Lc_CtrlSave;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <MCL_STK_vDelay_ms+0xc0>)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	371c      	adds	r7, #28
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e010 	.word	0xe000e010
 80015ec:	200000c8 	.word	0x200000c8

080015f0 <TIM_vInit>:
#include "CORE_NVIC_Interface.h"
#include "MCAL_GPIO_Interface.h"

void (*Global_TIMCallBackPtr[2])(void) = {NULL_PTR, NULL_PTR};

void TIM_vInit(TIM_HandleTypeDef *htim) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	u32 tmpcr1 = htim->Instance->CR1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	613b      	str	r3, [r7, #16]
	u32 tmpccmr1 = htim->Instance->CCMR1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	60fb      	str	r3, [r7, #12]
	u32 tmpccer = htim->Instance->CCER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	60bb      	str	r3, [r7, #8]
	u32 tmpdier = htim->Instance->DIER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	617b      	str	r3, [r7, #20]
	// Enable timer clock
	if (htim->Instance == TIM1) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a45      	ldr	r2, [pc, #276]	; (8001734 <TIM_vInit+0x144>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d106      	bne.n	8001630 <TIM_vInit+0x40>
		RCC_TIM1_CLOCK_EN();
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <TIM_vInit+0x148>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a44      	ldr	r2, [pc, #272]	; (8001738 <TIM_vInit+0x148>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	e022      	b.n	8001676 <TIM_vInit+0x86>
	} else if (htim->Instance == TIM2) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001638:	d106      	bne.n	8001648 <TIM_vInit+0x58>
		RCC_TIM2_CLOCK_EN();
 800163a:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <TIM_vInit+0x148>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <TIM_vInit+0x148>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	e016      	b.n	8001676 <TIM_vInit+0x86>
	} else if (htim->Instance == TIM3) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a3b      	ldr	r2, [pc, #236]	; (800173c <TIM_vInit+0x14c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d106      	bne.n	8001660 <TIM_vInit+0x70>
		RCC_TIM3_CLOCK_EN();
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <TIM_vInit+0x148>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a38      	ldr	r2, [pc, #224]	; (8001738 <TIM_vInit+0x148>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	e00a      	b.n	8001676 <TIM_vInit+0x86>
	} else if (htim->Instance == TIM4) {
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a36      	ldr	r2, [pc, #216]	; (8001740 <TIM_vInit+0x150>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d105      	bne.n	8001676 <TIM_vInit+0x86>
		RCC_TIM4_CLOCK_EN();
 800166a:	4b33      	ldr	r3, [pc, #204]	; (8001738 <TIM_vInit+0x148>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a32      	ldr	r2, [pc, #200]	; (8001738 <TIM_vInit+0x148>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
	}
	// Clear timer mode and clock division ratio bits
	tmpcr1 &= ~(TIM_CR1_CMS_Msk | TIM_CR1_CMS_Msk);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800167c:	613b      	str	r3, [r7, #16]

	// Set timer mode and clock division ratio
	tmpcr1 |= (htim->Init.TIM_ClockDiv << TIM_CR1_CMS_Pos) | TIM_CR1_CEN;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7bdb      	ldrb	r3, [r3, #15]
 8001682:	015b      	lsls	r3, r3, #5
 8001684:	461a      	mov	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	613b      	str	r3, [r7, #16]


	// Set timer prescaler
	htim->Instance->PSC = htim->Init.TIM_Prescaler;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	895a      	ldrh	r2, [r3, #10]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
	// Set timer period
	htim->Instance->ARR = htim->Init.TIM_Period;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	891a      	ldrh	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set timer IRQ
	if (htim->Init.TIM_INT != TIM_INT_DISABLE) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	799b      	ldrb	r3, [r3, #6]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d02e      	beq.n	800170a <TIM_vInit+0x11a>
		tmpdier |= htim->Init.TIM_INT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	799b      	ldrb	r3, [r3, #6]
 80016b0:	461a      	mov	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
		if (htim->Instance == TIM2) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d108      	bne.n	80016d4 <TIM_vInit+0xe4>
			COR_NVIC_vSetPriority(TIM2_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201c      	movs	r0, #28
 80016c8:	f7ff f9a2 	bl	8000a10 <COR_NVIC_vSetPriority>
			COR_NVIC_vEnableInterrupt(TIM2_IRQn);
 80016cc:	201c      	movs	r0, #28
 80016ce:	f7ff f979 	bl	80009c4 <COR_NVIC_vEnableInterrupt>
 80016d2:	e01a      	b.n	800170a <TIM_vInit+0x11a>
		} else if (htim->Instance == TIM3) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <TIM_vInit+0x14c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d108      	bne.n	80016f0 <TIM_vInit+0x100>
			COR_NVIC_vSetPriority(TIM3_IRQn, 1, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2101      	movs	r1, #1
 80016e2:	201d      	movs	r0, #29
 80016e4:	f7ff f994 	bl	8000a10 <COR_NVIC_vSetPriority>
			COR_NVIC_vEnableInterrupt(TIM3_IRQn);
 80016e8:	201d      	movs	r0, #29
 80016ea:	f7ff f96b 	bl	80009c4 <COR_NVIC_vEnableInterrupt>
 80016ee:	e00c      	b.n	800170a <TIM_vInit+0x11a>
		} else if (htim->Instance == TIM4) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <TIM_vInit+0x150>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d107      	bne.n	800170a <TIM_vInit+0x11a>
			COR_NVIC_vSetPriority(TIM4_IRQn, 2, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2102      	movs	r1, #2
 80016fe:	201e      	movs	r0, #30
 8001700:	f7ff f986 	bl	8000a10 <COR_NVIC_vSetPriority>
			COR_NVIC_vEnableInterrupt(TIM4_IRQn);
 8001704:	201e      	movs	r0, #30
 8001706:	f7ff f95d 	bl	80009c4 <COR_NVIC_vEnableInterrupt>
		}
	}

	// Apply the configuration
	htim->Instance->CR1 = tmpcr1;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	601a      	str	r2, [r3, #0]
	htim->Instance->CCMR1 = tmpccmr1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	619a      	str	r2, [r3, #24]
	htim->Instance->CCER = tmpccer;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	621a      	str	r2, [r3, #32]
	htim->Instance->DIER = tmpdier;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	60da      	str	r2, [r3, #12]
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40010000 	.word	0x40010000
 8001738:	40023800 	.word	0x40023800
 800173c:	40000400 	.word	0x40000400
 8001740:	40000800 	.word	0x40000800

08001744 <TIM_IC_vInit>:

void TIM_IC_vInit(TIM_HandleTypeDef *htim, TIM_IC_CfgType *ic_config) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	GPIO_CfgType GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]

	if (htim->Instance == TIM1) {
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <TIM_IC_vInit+0x144>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d05b      	beq.n	8001818 <TIM_IC_vInit+0xd4>
	} else if (htim->Instance == TIM2) {
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d119      	bne.n	800179e <TIM_IC_vInit+0x5a>

		if (htim->Channel == TIM_CHANNEL_1) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7d1b      	ldrb	r3, [r3, #20]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <TIM_IC_vInit+0x34>
			// Configure PA0 as an alternate function output for channel 1
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN0;
 8001772:	2300      	movs	r3, #0
 8001774:	733b      	strb	r3, [r7, #12]
 8001776:	e005      	b.n	8001784 <TIM_IC_vInit+0x40>
		} else if (htim->Channel == TIM_CHANNEL_2) {
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7d1b      	ldrb	r3, [r3, #20]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d101      	bne.n	8001784 <TIM_IC_vInit+0x40>
			/* Configure PA1 as an alternate function output for channel 2*/
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN1;
 8001780:	2301      	movs	r3, #1
 8001782:	733b      	strb	r3, [r7, #12]
		}
		MCL_GPIO_vSetPinCfg(GPIOA, &GPIO_InitStruct);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	4619      	mov	r1, r3
 800178a:	4840      	ldr	r0, [pc, #256]	; (800188c <TIM_IC_vInit+0x148>)
 800178c:	f7ff fc6e 	bl	800106c <MCL_GPIO_vSetPinCfg>
		MCL_GPIO_vSetPinAltFunc(GPIOA, GPIO_InitStruct.GPIO_Pin, GPIO_AF1_TIM1_TIM2);
 8001790:	7b3b      	ldrb	r3, [r7, #12]
 8001792:	2201      	movs	r2, #1
 8001794:	4619      	mov	r1, r3
 8001796:	483d      	ldr	r0, [pc, #244]	; (800188c <TIM_IC_vInit+0x148>)
 8001798:	f7ff fd0b 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>
 800179c:	e03c      	b.n	8001818 <TIM_IC_vInit+0xd4>
	} else if (htim->Instance == TIM3) {
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <TIM_IC_vInit+0x14c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d119      	bne.n	80017dc <TIM_IC_vInit+0x98>

		if (htim->Channel == TIM_CHANNEL_1) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7d1b      	ldrb	r3, [r3, #20]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d102      	bne.n	80017b6 <TIM_IC_vInit+0x72>
			// Configure PA6 as an alternate function output for channel 1
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN6;
 80017b0:	2306      	movs	r3, #6
 80017b2:	733b      	strb	r3, [r7, #12]
 80017b4:	e005      	b.n	80017c2 <TIM_IC_vInit+0x7e>
		} else if (htim->Channel == TIM_CHANNEL_2) {
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7d1b      	ldrb	r3, [r3, #20]
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d101      	bne.n	80017c2 <TIM_IC_vInit+0x7e>
			/* Configure PA7 as an alternate function output for channel 2*/
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN7;
 80017be:	2307      	movs	r3, #7
 80017c0:	733b      	strb	r3, [r7, #12]
		}
		MCL_GPIO_vSetPinCfg(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4830      	ldr	r0, [pc, #192]	; (800188c <TIM_IC_vInit+0x148>)
 80017ca:	f7ff fc4f 	bl	800106c <MCL_GPIO_vSetPinCfg>
		MCL_GPIO_vSetPinAltFunc(GPIOA, GPIO_InitStruct.GPIO_Pin, GPIO_AF2_TIM3_TIM4);
 80017ce:	7b3b      	ldrb	r3, [r7, #12]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4619      	mov	r1, r3
 80017d4:	482d      	ldr	r0, [pc, #180]	; (800188c <TIM_IC_vInit+0x148>)
 80017d6:	f7ff fcec 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>
 80017da:	e01d      	b.n	8001818 <TIM_IC_vInit+0xd4>

	} else if (htim->Instance == TIM4) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2c      	ldr	r2, [pc, #176]	; (8001894 <TIM_IC_vInit+0x150>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d118      	bne.n	8001818 <TIM_IC_vInit+0xd4>
		if (htim->Channel == TIM_CHANNEL_1) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	7d1b      	ldrb	r3, [r3, #20]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <TIM_IC_vInit+0xb0>
			// Configure PB6 as an alternate function output for channel 1
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN6;
 80017ee:	2306      	movs	r3, #6
 80017f0:	733b      	strb	r3, [r7, #12]
 80017f2:	e005      	b.n	8001800 <TIM_IC_vInit+0xbc>
		} else if (htim->Channel == TIM_CHANNEL_2) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7d1b      	ldrb	r3, [r3, #20]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d101      	bne.n	8001800 <TIM_IC_vInit+0xbc>
			// Configure PB7 as an alternate function output for channel 2
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN7;
 80017fc:	2307      	movs	r3, #7
 80017fe:	733b      	strb	r3, [r7, #12]
		}
		MCL_GPIO_vSetPinCfg(GPIOB, &GPIO_InitStruct);
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	4824      	ldr	r0, [pc, #144]	; (8001898 <TIM_IC_vInit+0x154>)
 8001808:	f7ff fc30 	bl	800106c <MCL_GPIO_vSetPinCfg>
		MCL_GPIO_vSetPinAltFunc(GPIOB, GPIO_InitStruct.GPIO_Pin, GPIO_AF2_TIM3_TIM4);
 800180c:	7b3b      	ldrb	r3, [r7, #12]
 800180e:	2202      	movs	r2, #2
 8001810:	4619      	mov	r1, r3
 8001812:	4821      	ldr	r0, [pc, #132]	; (8001898 <TIM_IC_vInit+0x154>)
 8001814:	f7ff fccd 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>

	}
	//htim->Instance->CR1 = TIM_CR1_ARPE;              /*!< TIMx_ARR register is buffered */
	u8 ccmr_offset = (ic_config->IC_Channel - 1) * 8;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3b01      	subs	r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	73fb      	strb	r3, [r7, #15]
	// Configure the timer peripheral for input capture mode
	htim->Instance->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk << (TIM_CCMR1_CC1S_Pos << ccmr_offset));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699a      	ldr	r2, [r3, #24]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0203 	bic.w	r2, r2, #3
 8001832:	619a      	str	r2, [r3, #24]
	htim->Instance->CCMR1 |= ic_config->IC_Selection << (TIM_CCMR1_CC1S_Pos << ccmr_offset);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6999      	ldr	r1, [r3, #24]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	619a      	str	r2, [r3, #24]
	htim->Instance->CCER |=
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a1a      	ldr	r2, [r3, #32]
			TIM_CCER_CC1P | (TIM_CCER_CC1E << ((ic_config->IC_Channel - 1) * 4)); // Capture on falling edge
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	2101      	movs	r1, #1
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
	htim->Instance->CCER |=
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0202 	orr.w	r2, r2, #2
 8001864:	621a      	str	r2, [r3, #32]

	// Configure the timer peripheral prescaler and period
	htim->Instance->PSC = ic_config->IC_Prescaler - 1;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3a01      	subs	r2, #1
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = ic_config->IC_Period - 1;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	3a01      	subs	r2, #1
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40010000 	.word	0x40010000
 800188c:	40020000 	.word	0x40020000
 8001890:	40000400 	.word	0x40000400
 8001894:	40000800 	.word	0x40000800
 8001898:	40020400 	.word	0x40020400

0800189c <TIM_PWM_vInit>:

void TIM_PWM_vInit(TIM_HandleTypeDef *htim, u32 Cp_Period) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	GPIO_CfgType GPIO_InitStruct;
	GPIO_InitStruct.GPIO_Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	737b      	strb	r3, [r7, #13]
	GPIO_InitStruct.GPIO_Speed = GPIO_SPEED_HIGH;
 80018aa:	2302      	movs	r3, #2
 80018ac:	73bb      	strb	r3, [r7, #14]

	if (htim->Instance == TIM1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a60      	ldr	r2, [pc, #384]	; (8001a34 <TIM_PWM_vInit+0x198>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d106      	bne.n	80018c6 <TIM_PWM_vInit+0x2a>
	{
		RCC_TIM1_CLOCK_EN();
 80018b8:	4b5f      	ldr	r3, [pc, #380]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	4a5e      	ldr	r2, [pc, #376]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6453      	str	r3, [r2, #68]	; 0x44
 80018c4:	e06d      	b.n	80019a2 <TIM_PWM_vInit+0x106>
	}
	else if (htim->Instance == TIM2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ce:	d11f      	bne.n	8001910 <TIM_PWM_vInit+0x74>
	{
		RCC_TIM2_CLOCK_EN();
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6413      	str	r3, [r2, #64]	; 0x40
		if (htim->Channel == TIM_CHANNEL_1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7d1b      	ldrb	r3, [r3, #20]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d102      	bne.n	80018ea <TIM_PWM_vInit+0x4e>
		{
			// Configure PA0 as an alternate function output for channel 1
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	733b      	strb	r3, [r7, #12]
 80018e8:	e005      	b.n	80018f6 <TIM_PWM_vInit+0x5a>
		}
		else if (htim->Channel == TIM_CHANNEL_2)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7d1b      	ldrb	r3, [r3, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d101      	bne.n	80018f6 <TIM_PWM_vInit+0x5a>
		{
			/* Configure PA1 as an alternate function output for channel 2*/
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	733b      	strb	r3, [r7, #12]
		}
		MCL_GPIO_vSetPinCfg(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	484f      	ldr	r0, [pc, #316]	; (8001a3c <TIM_PWM_vInit+0x1a0>)
 80018fe:	f7ff fbb5 	bl	800106c <MCL_GPIO_vSetPinCfg>
		MCL_GPIO_vSetPinAltFunc(GPIOA, GPIO_InitStruct.GPIO_Pin, GPIO_AF1_TIM1_TIM2);
 8001902:	7b3b      	ldrb	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	484c      	ldr	r0, [pc, #304]	; (8001a3c <TIM_PWM_vInit+0x1a0>)
 800190a:	f7ff fc52 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>
 800190e:	e048      	b.n	80019a2 <TIM_PWM_vInit+0x106>
	}
	else if (htim->Instance == TIM3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4a      	ldr	r2, [pc, #296]	; (8001a40 <TIM_PWM_vInit+0x1a4>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d11f      	bne.n	800195a <TIM_PWM_vInit+0xbe>
	{
		RCC_TIM3_CLOCK_EN();
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a46      	ldr	r2, [pc, #280]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6413      	str	r3, [r2, #64]	; 0x40

		if (htim->Channel == TIM_CHANNEL_1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7d1b      	ldrb	r3, [r3, #20]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d102      	bne.n	8001934 <TIM_PWM_vInit+0x98>
		{
			// Configure PA6 as an alternate function output for channel 1
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN6;
 800192e:	2306      	movs	r3, #6
 8001930:	733b      	strb	r3, [r7, #12]
 8001932:	e005      	b.n	8001940 <TIM_PWM_vInit+0xa4>
		}
		else if (htim->Channel == TIM_CHANNEL_2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7d1b      	ldrb	r3, [r3, #20]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d101      	bne.n	8001940 <TIM_PWM_vInit+0xa4>
		{
			/* Configure PA7 as an alternate function output for channel 2*/
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN7;
 800193c:	2307      	movs	r3, #7
 800193e:	733b      	strb	r3, [r7, #12]
		}

		MCL_GPIO_vSetPinCfg(GPIOA, &GPIO_InitStruct);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	4619      	mov	r1, r3
 8001946:	483d      	ldr	r0, [pc, #244]	; (8001a3c <TIM_PWM_vInit+0x1a0>)
 8001948:	f7ff fb90 	bl	800106c <MCL_GPIO_vSetPinCfg>
		MCL_GPIO_vSetPinAltFunc(GPIOA, GPIO_InitStruct.GPIO_Pin, GPIO_AF2_TIM3_TIM4);
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	2202      	movs	r2, #2
 8001950:	4619      	mov	r1, r3
 8001952:	483a      	ldr	r0, [pc, #232]	; (8001a3c <TIM_PWM_vInit+0x1a0>)
 8001954:	f7ff fc2d 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>
 8001958:	e023      	b.n	80019a2 <TIM_PWM_vInit+0x106>

	}
	else if (htim->Instance == TIM4)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a39      	ldr	r2, [pc, #228]	; (8001a44 <TIM_PWM_vInit+0x1a8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d11e      	bne.n	80019a2 <TIM_PWM_vInit+0x106>
	{
		RCC_TIM4_CLOCK_EN();
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a33      	ldr	r2, [pc, #204]	; (8001a38 <TIM_PWM_vInit+0x19c>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
		if (htim->Channel == TIM_CHANNEL_1) {
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7d1b      	ldrb	r3, [r3, #20]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <TIM_PWM_vInit+0xe2>
			// Configure PB6 as an alternate function output for channel 1
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN6;
 8001978:	2306      	movs	r3, #6
 800197a:	733b      	strb	r3, [r7, #12]
 800197c:	e005      	b.n	800198a <TIM_PWM_vInit+0xee>
		} else if (htim->Channel == TIM_CHANNEL_2) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7d1b      	ldrb	r3, [r3, #20]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d101      	bne.n	800198a <TIM_PWM_vInit+0xee>
			// Configure PB7 as an alternate function output for channel 2
			GPIO_InitStruct.GPIO_Pin = GPIO_PIN7;
 8001986:	2307      	movs	r3, #7
 8001988:	733b      	strb	r3, [r7, #12]
		}
		MCL_GPIO_vSetPinCfg(GPIOB, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	482d      	ldr	r0, [pc, #180]	; (8001a48 <TIM_PWM_vInit+0x1ac>)
 8001992:	f7ff fb6b 	bl	800106c <MCL_GPIO_vSetPinCfg>
		MCL_GPIO_vSetPinAltFunc(GPIOB, GPIO_InitStruct.GPIO_Pin, GPIO_AF2_TIM3_TIM4);
 8001996:	7b3b      	ldrb	r3, [r7, #12]
 8001998:	2202      	movs	r2, #2
 800199a:	4619      	mov	r1, r3
 800199c:	482a      	ldr	r0, [pc, #168]	; (8001a48 <TIM_PWM_vInit+0x1ac>)
 800199e:	f7ff fc08 	bl	80011b2 <MCL_GPIO_vSetPinAltFunc>

	}

	// Configure the timer peripheral for PWM output
	u8 ccmr_offset = (htim->Channel - 1) * 8;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7d1b      	ldrb	r3, [r3, #20]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	73fb      	strb	r3, [r7, #15]
	htim->Instance->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk << ccmr_offset);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6999      	ldr	r1, [r3, #24]
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	619a      	str	r2, [r3, #24]
	htim->Instance->CCMR1 |= (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2) << ccmr_offset; // PWM mode 1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6999      	ldr	r1, [r3, #24]
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2260      	movs	r2, #96	; 0x60
 80019d0:	409a      	lsls	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	619a      	str	r2, [r3, #24]
	htim->Instance->CCMR1 |= (TIM_CCMR1_OC1PE) << ccmr_offset; // PWM mode 1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6999      	ldr	r1, [r3, #24]
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2208      	movs	r2, #8
 80019e4:	409a      	lsls	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	619a      	str	r2, [r3, #24]
	htim->Instance->CCER |= TIM_CCER_CC1E << ((htim->Channel - 1) * 4); // Enable output
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6a19      	ldr	r1, [r3, #32]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7d1b      	ldrb	r3, [r3, #20]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	2201      	movs	r2, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	621a      	str	r2, [r3, #32]

	// Configure the timer peripheral prescaler and period
	htim->Instance->PSC = htim->Init.TIM_Prescaler;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	895a      	ldrh	r2, [r3, #10]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = Cp_Period - 1;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Enable the timer peripheral
	htim->Instance->CR1 |= TIM_CR1_CEN;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40020400 	.word	0x40020400

08001a4c <TIM_PWM_SetDutyCycle>:
	// Enable the timer peripheral
	htim->Instance->CR1 |= TIM_CR1_CEN;
}


void TIM_PWM_SetDutyCycle(TIM_HandleTypeDef *htim, u8 Cp_DutyCycle) {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
	// Calculate the compare register value for the desired duty cycle
	u16 ccr_value = (Cp_DutyCycle * (htim->Instance->ARR + 1)) / 100;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a60:	3201      	adds	r2, #1
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <TIM_PWM_SetDutyCycle+0x7c>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	095b      	lsrs	r3, r3, #5
 8001a6e:	81fb      	strh	r3, [r7, #14]

	// Set the compare register for the selected channel
	switch (htim->Channel) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	7d1b      	ldrb	r3, [r3, #20]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d81e      	bhi.n	8001ab8 <TIM_PWM_SetDutyCycle+0x6c>
 8001a7a:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <TIM_PWM_SetDutyCycle+0x34>)
 8001a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001a9b 	.word	0x08001a9b
 8001a88:	08001aa5 	.word	0x08001aa5
 8001a8c:	08001aaf 	.word	0x08001aaf
		case TIM_CHANNEL_1: {    /* Return the capture 1 value */     htim->Instance->CCR1 = ccr_value;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	89fa      	ldrh	r2, [r7, #14]
 8001a96:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001a98:	e00f      	b.n	8001aba <TIM_PWM_SetDutyCycle+0x6e>
		}

		case TIM_CHANNEL_2: {    /* Return the capture 2 value */      htim->Instance->CCR2 = ccr_value;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	89fa      	ldrh	r2, [r7, #14]
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001aa2:	e00a      	b.n	8001aba <TIM_PWM_SetDutyCycle+0x6e>
		}

		case TIM_CHANNEL_3: {/* Return the capture 3 value */          htim->Instance->CCR3 = ccr_value;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	89fa      	ldrh	r2, [r7, #14]
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001aac:	e005      	b.n	8001aba <TIM_PWM_SetDutyCycle+0x6e>
		}

		case TIM_CHANNEL_4: {/* Return the capture 4 value */          htim->Instance->CCR4 = ccr_value;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	89fa      	ldrh	r2, [r7, #14]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001ab6:	e000      	b.n	8001aba <TIM_PWM_SetDutyCycle+0x6e>
		}

		default:
			break;
 8001ab8:	bf00      	nop
	}

}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	51eb851f 	.word	0x51eb851f

08001acc <TIM_xCheckINTSrc>:

void TIM_vDisableINT(TIM_HandleTypeDef *htim, TIM_INT_t Cp_TIM_INT) {
	htim->Instance->DIER &= ~Cp_TIM_INT;
}

enum STD_Status TIM_xCheckINTSrc(TIM_HandleTypeDef *htim, TIM_INT_t Cp_TIM_INT) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
	if ((htim->Instance->DIER & Cp_TIM_INT) != 0)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <TIM_xCheckINTSrc+0x1e>
		return SET;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <TIM_xCheckINTSrc+0x20>
	else
		return RESET;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <TIM_vClearFlag>:

void TIM_vClearFlag(TIM_HandleTypeDef *htim, TIM_INT_t Cp_TIM_INT) { (htim->Instance->SR &= ~Cp_TIM_INT); }
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4619      	mov	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	400a      	ands	r2, r1
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <TIM_xCheckINTFlag>:

enum STD_Status TIM_xCheckINTFlag(TIM_HandleTypeDef *htim, TIM_INT_t Cp_TIM_INT) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
	if ((htim->Instance->SR & Cp_TIM_INT) != 0)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <TIM_xCheckINTFlag+0x1e>
		return SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <TIM_xCheckINTFlag+0x20>
	else
		return RESET;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <TIM_vStart>:

void TIM_vStart(TIM_HandleTypeDef *htim) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]


	// Clear overflow flag
	htim->Instance->SR &= ~(TIM_SR_UIF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	611a      	str	r2, [r3, #16]

	if (htim->Init.TIM_Mode == TIM_MODE_PWM) {
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	791b      	ldrb	r3, [r3, #4]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d05a      	beq.n	8001c26 <TIM_vStart+0xd6>
		// Enable PWM output for the specified channel

	} else if (htim->Init.TIM_Mode == TIM_MODE_INPUT_CAPTURE) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	791b      	ldrb	r3, [r3, #4]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d119      	bne.n	8001bac <TIM_vStart+0x5c>
		htim->Instance->SR &= ~(TIM_SR_CC1IF | TIM_SR_CC1OF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b86:	f023 0302 	bic.w	r3, r3, #2
 8001b8a:	6113      	str	r3, [r2, #16]
		htim->Instance->DIER |= TIM_DIER_UIE | (TIM_DIER_CC1IE << (htim->Channel - 1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68da      	ldr	r2, [r3, #12]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7d1b      	ldrb	r3, [r3, #20]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2102      	movs	r1, #2
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0201 	orr.w	r2, r2, #1
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e03c      	b.n	8001c26 <TIM_vStart+0xd6>

	} else if (htim->Init.TIM_Mode == TIM_MODE_OUTPUT_COMPARE) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	791b      	ldrb	r3, [r3, #4]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d121      	bne.n	8001bf8 <TIM_vStart+0xa8>
		// Set timer pulse
		TIM_vSetCompareVal(htim, htim->Channel, htim->Init.TIM_Pulse);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7d19      	ldrb	r1, [r3, #20]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	899b      	ldrh	r3, [r3, #12]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f876 	bl	8001cb0 <TIM_vSetCompareVal>

		// Clear input capture flags
		htim->Instance->SR &= ~(TIM_SR_CC1IF | TIM_SR_CC1OF);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bd2:	f023 0302 	bic.w	r3, r3, #2
 8001bd6:	6113      	str	r3, [r2, #16]
		// Enable output compare mode for the specified channel
		htim->Instance->DIER |= TIM_DIER_UIE | (TIM_DIER_CC1IE << (htim->Channel - 1));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7d1b      	ldrb	r3, [r3, #20]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	2102      	movs	r1, #2
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	e016      	b.n	8001c26 <TIM_vStart+0xd6>
	} else if (htim->Init.TIM_Mode == TIM_MODE_TIMING) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	791b      	ldrb	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d112      	bne.n	8001c26 <TIM_vStart+0xd6>
		// Configure the timer mode
		htim->Instance->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS); // Clear the direction and center-aligned mode bits
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c0e:	601a      	str	r2, [r3, #0]
		htim->Instance->CR1 |= htim->Init.TIM_CounterMode << TIM_CR1_DIR_Pos; // Set the up-counting mode
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7b9b      	ldrb	r3, [r3, #14]
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

	}

	// Clear the counter and update flags
	htim->Instance->CNT = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
	// Enable timer counter
	htim->Instance->CR1 |= TIM_CR1_CEN;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f042 0201 	orr.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <TIM_u32ReadCapturedVal>:

u32 TIM_u32GetTimeRemaining(TIM_TypeDef *TIMx) {
	return TIMx->ARR - TIMx->CNT;
}

u32 TIM_u32ReadCapturedVal(TIM_HandleTypeDef *htim, u8 Channel) {
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
	u32 tmpreg = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]

	switch (Channel) {
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d81f      	bhi.n	8001ca0 <TIM_u32ReadCapturedVal+0x58>
 8001c60:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <TIM_u32ReadCapturedVal+0x20>)
 8001c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c66:	bf00      	nop
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c83 	.word	0x08001c83
 8001c70:	08001c8d 	.word	0x08001c8d
 8001c74:	08001c97 	.word	0x08001c97
		case TIM_CHANNEL_1: {    /* Return the capture 1 value */    tmpreg = htim->Instance->CCR1;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7e:	60fb      	str	r3, [r7, #12]
			break;
 8001c80:	e00f      	b.n	8001ca2 <TIM_u32ReadCapturedVal+0x5a>
		}

		case TIM_CHANNEL_2: {    /* Return the capture 2 value */    tmpreg = htim->Instance->CCR2;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	60fb      	str	r3, [r7, #12]
			break;
 8001c8a:	e00a      	b.n	8001ca2 <TIM_u32ReadCapturedVal+0x5a>
		}

		case TIM_CHANNEL_3: {/* Return the capture 3 value */        tmpreg = htim->Instance->CCR3;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	60fb      	str	r3, [r7, #12]
			break;
 8001c94:	e005      	b.n	8001ca2 <TIM_u32ReadCapturedVal+0x5a>
		}

		case TIM_CHANNEL_4: {/* Return the capture 4 value */        tmpreg = htim->Instance->CCR4;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	60fb      	str	r3, [r7, #12]
			break;
 8001c9e:	e000      	b.n	8001ca2 <TIM_u32ReadCapturedVal+0x5a>
		}

		default:
			break;
 8001ca0:	bf00      	nop
	}

	return tmpreg;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <TIM_vSetCompareVal>:

void TIM_vSetCompareVal(TIM_HandleTypeDef *htim, TIM_Channel_t Channel, u32 Compare_Value) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	72fb      	strb	r3, [r7, #11]


	switch (Channel) {
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d81e      	bhi.n	8001d04 <TIM_vSetCompareVal+0x54>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <TIM_vSetCompareVal+0x1c>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001ce7 	.word	0x08001ce7
 8001cd4:	08001cf1 	.word	0x08001cf1
 8001cd8:	08001cfb 	.word	0x08001cfb
		case TIM_CHANNEL_1: {    /* Return the capture 1 value */     htim->Instance->CCR1 = Compare_Value;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001ce4:	e00f      	b.n	8001d06 <TIM_vSetCompareVal+0x56>
		}

		case TIM_CHANNEL_2: {    /* Return the capture 2 value */      htim->Instance->CCR2 = Compare_Value;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001cee:	e00a      	b.n	8001d06 <TIM_vSetCompareVal+0x56>
		}

		case TIM_CHANNEL_3: {/* Return the capture 3 value */          htim->Instance->CCR3 = Compare_Value;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001cf8:	e005      	b.n	8001d06 <TIM_vSetCompareVal+0x56>
		}

		case TIM_CHANNEL_4: {/* Return the capture 4 value */          htim->Instance->CCR4 = Compare_Value;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001d02:	e000      	b.n	8001d06 <TIM_vSetCompareVal+0x56>
		}

		default:
			break;
 8001d04:	bf00      	nop
	}

}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop

08001d14 <TIM_vSetClkPolarity>:

void TIM_vSetClkPolarity(TIM_HandleTypeDef *TMR_Handle, TIM_Channel_t TIM_Channel, TIM_ClkPol_t polarity) {
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	70fb      	strb	r3, [r7, #3]
 8001d20:	4613      	mov	r3, r2
 8001d22:	70bb      	strb	r3, [r7, #2]
	u8 ccer_offset = ((TMR_Handle->Channel - 1) * 4);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7d1b      	ldrb	r3, [r3, #20]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	73fb      	strb	r3, [r7, #15]

	if (polarity == TIM_CLOCKPOLARITY_RISING) {
 8001d30:	78bb      	ldrb	r3, [r7, #2]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <TIM_vSetClkPolarity+0x3c>
		TMR_Handle->Instance->CCER &= ~(TIM_CCER_CC1P << ccer_offset);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6a19      	ldr	r1, [r3, #32]
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43da      	mvns	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	621a      	str	r2, [r3, #32]
	} else if (polarity == TIM_CLOCKPOLARITY_BOTHEDGE) {
		TMR_Handle->Instance->CCER |= TIM_CCER_CC1P << ccer_offset;
		TMR_Handle->Instance->CCER |= TIM_CCER_CC1NP << ccer_offset;
	}

}
 8001d4e:	e024      	b.n	8001d9a <TIM_vSetClkPolarity+0x86>
	} else if (polarity == TIM_CLOCKPOLARITY_FALLING) {
 8001d50:	78bb      	ldrb	r3, [r7, #2]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d10a      	bne.n	8001d6c <TIM_vSetClkPolarity+0x58>
		TMR_Handle->Instance->CCER |= TIM_CCER_CC1P << ccer_offset;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a19      	ldr	r1, [r3, #32]
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	409a      	lsls	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	621a      	str	r2, [r3, #32]
}
 8001d6a:	e016      	b.n	8001d9a <TIM_vSetClkPolarity+0x86>
	} else if (polarity == TIM_CLOCKPOLARITY_BOTHEDGE) {
 8001d6c:	78bb      	ldrb	r3, [r7, #2]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d113      	bne.n	8001d9a <TIM_vSetClkPolarity+0x86>
		TMR_Handle->Instance->CCER |= TIM_CCER_CC1P << ccer_offset;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6a19      	ldr	r1, [r3, #32]
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	621a      	str	r2, [r3, #32]
		TMR_Handle->Instance->CCER |= TIM_CCER_CC1NP << ccer_offset;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a19      	ldr	r1, [r3, #32]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2208      	movs	r2, #8
 8001d90:	409a      	lsls	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	621a      	str	r2, [r3, #32]
}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
	...

08001da8 <TIM_vInitCounter>:

	CLEAR_BIT(TIMx->CR1, 4);        // counter mode is up counting

}

void TIM_vInitCounter(TIM_HandleTypeDef *htim) {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	// Enable timer clock
	if (htim->Instance == TIM1) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <TIM_vInitCounter+0xcc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d106      	bne.n	8001dc8 <TIM_vInitCounter+0x20>
		RCC_TIM1_CLOCK_EN();
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	e022      	b.n	8001e0e <TIM_vInitCounter+0x66>
	} else if (htim->Instance == TIM2) {
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd0:	d106      	bne.n	8001de0 <TIM_vInitCounter+0x38>
		RCC_TIM2_CLOCK_EN();
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	4a28      	ldr	r2, [pc, #160]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dde:	e016      	b.n	8001e0e <TIM_vInitCounter+0x66>
	} else if (htim->Instance == TIM3) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <TIM_vInitCounter+0xd4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d106      	bne.n	8001df8 <TIM_vInitCounter+0x50>
		RCC_TIM3_CLOCK_EN();
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	e00a      	b.n	8001e0e <TIM_vInitCounter+0x66>
	} else if (htim->Instance == TIM4) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a20      	ldr	r2, [pc, #128]	; (8001e80 <TIM_vInitCounter+0xd8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d105      	bne.n	8001e0e <TIM_vInitCounter+0x66>
		RCC_TIM4_CLOCK_EN();
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a1c      	ldr	r2, [pc, #112]	; (8001e78 <TIM_vInitCounter+0xd0>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Disable the timer
	htim->Instance->CR1 &= ~TIM_CR1_CEN;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

	// Set the prescaler and period
	htim->Instance->PSC = htim->Init.TIM_Prescaler;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	895a      	ldrh	r2, [r3, #10]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
	htim->Instance->ARR = htim->Init.TIM_Period - 1;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	891b      	ldrh	r3, [r3, #8]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure the timer mode
	htim->Instance->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS); // Clear the direction and center-aligned mode bits
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e42:	601a      	str	r2, [r3, #0]
	htim->Instance->CR1 |= TIM_COUNTERMODE_UP; // Set the up-counting mode
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	601a      	str	r2, [r3, #0]

	// Clear the counter and update flags
	htim->Instance->CNT = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
	htim->Instance->SR &= ~(TIM_SR_UIF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0201 	bic.w	r2, r2, #1
 8001e66:	611a      	str	r2, [r3, #16]

}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800

08001e84 <MotorDriver_voidInit>:
 * @brief Header file that contains the configuration for the motor driver.
 */

#include "MotorDriver_Config.h"

void MotorDriver_voidInit(void) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	// Configure Control Pins for direction control
	MCL_GPIO_vSetPinMode(MOTORDRIVER_PORT, MOTORDRIVER_IN1, GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 8001e88:	2301      	movs	r3, #1
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <MotorDriver_voidInit+0x4c>)
 8001e90:	f7fe ff9e 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(MOTORDRIVER_PORT, MOTORDRIVER_IN2, GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 8001e94:	2301      	movs	r3, #1
 8001e96:	2201      	movs	r2, #1
 8001e98:	2101      	movs	r1, #1
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MotorDriver_voidInit+0x4c>)
 8001e9c:	f7fe ff98 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(MOTORDRIVER_PORT, MOTORDRIVER_IN3, GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <MotorDriver_voidInit+0x4c>)
 8001ea8:	f7fe ff92 	bl	8000dd0 <MCL_GPIO_vSetPinMode>
	MCL_GPIO_vSetPinMode(MOTORDRIVER_PORT, MOTORDRIVER_IN4, GPIO_MODE_OUT_PP, GPIO_SPEED_MEDIUM);
 8001eac:	2301      	movs	r3, #1
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MotorDriver_voidInit+0x4c>)
 8001eb4:	f7fe ff8c 	bl	8000dd0 <MCL_GPIO_vSetPinMode>

	// Configure PWM channels for speed control and Set the preload = 1000
	TIM_PWM_vInit(&PWM_htim31, 1000);
 8001eb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ebc:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MotorDriver_voidInit+0x50>)
 8001ebe:	f7ff fced 	bl	800189c <TIM_PWM_vInit>
	TIM_PWM_vInit(&PWM_htim32, 1000);
 8001ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ec6:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <MotorDriver_voidInit+0x54>)
 8001ec8:	f7ff fce8 	bl	800189c <TIM_PWM_vInit>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	2000006c 	.word	0x2000006c
 8001ed8:	20000084 	.word	0x20000084

08001edc <MotorDriver_voidControlSpeed>:



void MotorDriver_voidControlSpeed(u8 Cp_DutyCycle) {
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	TIM_PWM_SetDutyCycle(&PWM_htim31, Cp_DutyCycle);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <MotorDriver_voidControlSpeed+0x28>)
 8001eec:	f7ff fdae 	bl	8001a4c <TIM_PWM_SetDutyCycle>
	TIM_PWM_SetDutyCycle(&PWM_htim32, Cp_DutyCycle);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MotorDriver_voidControlSpeed+0x2c>)
 8001ef6:	f7ff fda9 	bl	8001a4c <TIM_PWM_SetDutyCycle>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000006c 	.word	0x2000006c
 8001f08:	20000084 	.word	0x20000084

08001f0c <MotorDriver_voidMoveForward>:
	TIM_PWM_SetDutyCycle(&PWM_htim32, Cp_DutyCycle);
}



void MotorDriver_voidMoveForward(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN1, PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	2104      	movs	r1, #4
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <MotorDriver_voidMoveForward+0x30>)
 8001f16:	f7ff f974 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN2, PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4807      	ldr	r0, [pc, #28]	; (8001f3c <MotorDriver_voidMoveForward+0x30>)
 8001f20:	f7ff f96f 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN3, PIN_SET);
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <MotorDriver_voidMoveForward+0x30>)
 8001f2a:	f7ff f96a 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN4, PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2103      	movs	r1, #3
 8001f32:	4802      	ldr	r0, [pc, #8]	; (8001f3c <MotorDriver_voidMoveForward+0x30>)
 8001f34:	f7ff f965 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40020000 	.word	0x40020000

08001f40 <MotorDriver_voidMoveRight>:
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN2, PIN_SET);
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN3, PIN_RESET);
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN4, PIN_SET);
}

void MotorDriver_voidMoveRight(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN1, PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2104      	movs	r1, #4
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <MotorDriver_voidMoveRight+0x30>)
 8001f4a:	f7ff f95a 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN2, PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2101      	movs	r1, #1
 8001f52:	4807      	ldr	r0, [pc, #28]	; (8001f70 <MotorDriver_voidMoveRight+0x30>)
 8001f54:	f7ff f955 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN3, PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	4804      	ldr	r0, [pc, #16]	; (8001f70 <MotorDriver_voidMoveRight+0x30>)
 8001f5e:	f7ff f950 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN4, PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2103      	movs	r1, #3
 8001f66:	4802      	ldr	r0, [pc, #8]	; (8001f70 <MotorDriver_voidMoveRight+0x30>)
 8001f68:	f7ff f94b 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40020000 	.word	0x40020000

08001f74 <MotorDriver_voidMoveLeft>:

void MotorDriver_voidMoveLeft(void) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN1, PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <MotorDriver_voidMoveLeft+0x30>)
 8001f7e:	f7ff f940 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN2, PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MotorDriver_voidMoveLeft+0x30>)
 8001f88:	f7ff f93b 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN3, PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MotorDriver_voidMoveLeft+0x30>)
 8001f92:	f7ff f936 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
	MCL_GPIO_vAtomicSetPin(MOTORDRIVER_PORT, MOTORDRIVER_IN4, PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2103      	movs	r1, #3
 8001f9a:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <MotorDriver_voidMoveLeft+0x30>)
 8001f9c:	f7ff f931 	bl	8001202 <MCL_GPIO_vAtomicSetPin>
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <SInit_VoidINIT>:

/******************************************************************/
/************  		Functions Implementation	     **************/
/******************************************************************/
void SInit_VoidINIT(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	//MCL_RCC_vInitSysClk(&RCC_G_Config); // Initialize the system clock

	MCL_RCC_vInitSysClk(&RCC_G_Config); // Initialize the system clock
 8001fac:	480f      	ldr	r0, [pc, #60]	; (8001fec <SInit_VoidINIT+0x44>)
 8001fae:	f7ff f98d 	bl	80012cc <MCL_RCC_vInitSysClk>

	MCL_RCC_vEnablePeriphClk(AHB1_BUS, 0 );	 //Enable POERTA
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f7ff f9db 	bl	8001370 <MCL_RCC_vEnablePeriphClk>

	MCL_RCC_vEnablePeriphClk(APB2_BUS, 4 );  //Enable UART
 8001fba:	2104      	movs	r1, #4
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff f9d7 	bl	8001370 <MCL_RCC_vEnablePeriphClk>

	MCL_STK_vInit(&STK_G_Config); // Initialize the SysTick timer
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <SInit_VoidINIT+0x48>)
 8001fc4:	f7ff fa20 	bl	8001408 <MCL_STK_vInit>

	TimerDelay_Init(); // Initialize the timer delay
 8001fc8:	f000 fa78 	bl	80024bc <TimerDelay_Init>

	HAL_HCSR04_vInit(&HCSR04_CfgParam[HCSR04_SENSOR1], &US_htim2); // Initialize the HCSR04 sensor
 8001fcc:	4909      	ldr	r1, [pc, #36]	; (8001ff4 <SInit_VoidINIT+0x4c>)
 8001fce:	480a      	ldr	r0, [pc, #40]	; (8001ff8 <SInit_VoidINIT+0x50>)
 8001fd0:	f7fe fd4c 	bl	8000a6c <HAL_HCSR04_vInit>

	MotorDriver_voidInit(); // Initialize the motor driver
 8001fd4:	f7ff ff56 	bl	8001e84 <MotorDriver_voidInit>

	IR_Init(); // Initialize the IR sensor
 8001fd8:	f7fe fed0 	bl	8000d7c <IR_Init>

	CLCD_voidInit(); //Initialize the LCD
 8001fdc:	f7fe fbee 	bl	80007bc <CLCD_voidInit>

	Buzzer_Init(); //Initialize the Buzzer
 8001fe0:	f7fe faf0 	bl	80005c4 <Buzzer_Init>

	GUI_voidInit(); //UART INIT
 8001fe4:	f7fe fa72 	bl	80004cc <GUI_voidInit>
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	2000004c 	.word	0x2000004c
 8001ff0:	200000c8 	.word	0x200000c8
 8001ff4:	20000034 	.word	0x20000034
 8001ff8:	20000000 	.word	0x20000000

08001ffc <SModes_UDIdleMode>:
/******************************************************************/
/************  		Functions Implementation	     **************/
/******************************************************************/
/** Idle Mode **/
State_t SModes_UDIdleMode(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
	Global_u8Speed = 0 ;
 8002002:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <SModes_UDIdleMode+0x100>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

	Buzzer_ON();
 8002008:	f7fe fae8 	bl	80005dc <Buzzer_ON>
	MotorDriver_voidControlSpeed(Global_u8Speed);
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <SModes_UDIdleMode+0x100>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff62 	bl	8001edc <MotorDriver_voidControlSpeed>

	/* Display The Mode */
	CLCD_voidSendStringPosition("Idle Mode", 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	4838      	ldr	r0, [pc, #224]	; (8002100 <SModes_UDIdleMode+0x104>)
 800201e:	f7fe fc37 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidSendStringPosition("STOP  ", 0, 10);
 8002022:	220a      	movs	r2, #10
 8002024:	2100      	movs	r1, #0
 8002026:	4837      	ldr	r0, [pc, #220]	; (8002104 <SModes_UDIdleMode+0x108>)
 8002028:	f7fe fc32 	bl	8000890 <CLCD_voidSendStringPosition>


	/**  Check the distance **/
	u32 Local_Distance = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	607b      	str	r3, [r7, #4]

	Local_Distance = HAL_HCSR04_f32Read(HCSR04_SENSOR1);
 8002030:	2000      	movs	r0, #0
 8002032:	f7fe fe67 	bl	8000d04 <HAL_HCSR04_f32Read>
 8002036:	6078      	str	r0, [r7, #4]

	if(Local_Distance > 95)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b5f      	cmp	r3, #95	; 0x5f
 800203c:	d901      	bls.n	8002042 <SModes_UDIdleMode+0x46>
	{
		Local_Distance = 100;
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	607b      	str	r3, [r7, #4]
	}

	/* Display The Distance */
	CLCD_voidSendStringPosition("Distance= ", 1, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	2101      	movs	r1, #1
 8002046:	4830      	ldr	r0, [pc, #192]	; (8002108 <SModes_UDIdleMode+0x10c>)
 8002048:	f7fe fc22 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidPrintINTNumber(Local_Distance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	461a      	mov	r2, r3
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f7fe fc4d 	bl	80008f6 <CLCD_voidPrintINTNumber>

	/*************************************************/
	GUI_voidSendSpeedDistance(Global_u8Speed, Local_Distance);
 800205c:	4b27      	ldr	r3, [pc, #156]	; (80020fc <SModes_UDIdleMode+0x100>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa4c 	bl	8000500 <GUI_voidSendSpeedDistance>
	/*************************************************/


	if(Local_Distance > HighDistance)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b14      	cmp	r3, #20
 800206c:	d903      	bls.n	8002076 <SModes_UDIdleMode+0x7a>
	{
		Current_State = MovingHighSpeed_State;
 800206e:	4b27      	ldr	r3, [pc, #156]	; (800210c <SModes_UDIdleMode+0x110>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
 8002074:	e00c      	b.n	8002090 <SModes_UDIdleMode+0x94>
	}
	else if((Local_Distance <= HighDistance) && (Local_Distance >= LowDistance))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b14      	cmp	r3, #20
 800207a:	d806      	bhi.n	800208a <SModes_UDIdleMode+0x8e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b09      	cmp	r3, #9
 8002080:	d903      	bls.n	800208a <SModes_UDIdleMode+0x8e>
	{
		Current_State = MovingLowSpeed_State;
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <SModes_UDIdleMode+0x110>)
 8002084:	2202      	movs	r2, #2
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e002      	b.n	8002090 <SModes_UDIdleMode+0x94>
	}
	else
	{
		Current_State = Idle_State;
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <SModes_UDIdleMode+0x110>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	}

	/**  Check IR Sensors **/
	u8 Local_RightValue = IR_u8Read_RightIR();
 8002090:	f7fe fe86 	bl	8000da0 <IR_u8Read_RightIR>
 8002094:	4603      	mov	r3, r0
 8002096:	70fb      	strb	r3, [r7, #3]
	u8 Local_LeftValue = IR_u8Read_LeftIR();
 8002098:	f7fe fe8e 	bl	8000db8 <IR_u8Read_LeftIR>
 800209c:	4603      	mov	r3, r0
 800209e:	70bb      	strb	r3, [r7, #2]
	if((Local_RightValue == Black) && (Local_LeftValue == Black))
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10b      	bne.n	80020be <SModes_UDIdleMode+0xc2>
 80020a6:	78bb      	ldrb	r3, [r7, #2]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d108      	bne.n	80020be <SModes_UDIdleMode+0xc2>
	{
		Current_State = Idle_State;
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <SModes_UDIdleMode+0x110>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
		CLCD_voidSendStringPosition(" ", 1, 12);
 80020b2:	220c      	movs	r2, #12
 80020b4:	2101      	movs	r1, #1
 80020b6:	4816      	ldr	r0, [pc, #88]	; (8002110 <SModes_UDIdleMode+0x114>)
 80020b8:	f7fe fbea 	bl	8000890 <CLCD_voidSendStringPosition>
 80020bc:	e004      	b.n	80020c8 <SModes_UDIdleMode+0xcc>
	}
	else
	{
		CLCD_voidSendStringPosition(" ", 1, 11);
 80020be:	220b      	movs	r2, #11
 80020c0:	2101      	movs	r1, #1
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <SModes_UDIdleMode+0x114>)
 80020c4:	f7fe fbe4 	bl	8000890 <CLCD_voidSendStringPosition>
	}

	/* Display The Speed */
	CLCD_voidSendStringPosition(" ", 1, 15);
 80020c8:	220f      	movs	r2, #15
 80020ca:	2101      	movs	r1, #1
 80020cc:	4810      	ldr	r0, [pc, #64]	; (8002110 <SModes_UDIdleMode+0x114>)
 80020ce:	f7fe fbdf 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidSendStringPosition("S", 1, 13);
 80020d2:	220d      	movs	r2, #13
 80020d4:	2101      	movs	r1, #1
 80020d6:	480f      	ldr	r0, [pc, #60]	; (8002114 <SModes_UDIdleMode+0x118>)
 80020d8:	f7fe fbda 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidPrintINTNumber(Global_u8Speed);
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <SModes_UDIdleMode+0x100>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fc04 	bl	80008f6 <CLCD_voidPrintINTNumber>


	return Current_State;
 80020ee:	4b07      	ldr	r3, [pc, #28]	; (800210c <SModes_UDIdleMode+0x110>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200000d8 	.word	0x200000d8
 8002100:	08002760 	.word	0x08002760
 8002104:	0800276c 	.word	0x0800276c
 8002108:	08002774 	.word	0x08002774
 800210c:	200000d4 	.word	0x200000d4
 8002110:	08002780 	.word	0x08002780
 8002114:	08002784 	.word	0x08002784

08002118 <SModes_UDMovingHighSpeed_Mode>:



/** High Speed Mode **/
State_t SModes_UDMovingHighSpeed_Mode(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
	/* Display The Mode */
	CLCD_voidSendStringPosition("High Mode", 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	484d      	ldr	r0, [pc, #308]	; (8002258 <SModes_UDMovingHighSpeed_Mode+0x140>)
 8002124:	f7fe fbb4 	bl	8000890 <CLCD_voidSendStringPosition>

	Buzzer_Off();
 8002128:	f7fe fa64 	bl	80005f4 <Buzzer_Off>

	/* Check about the speed */
	if (Global_u8Speed >= HighSpeed)
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b63      	cmp	r3, #99	; 0x63
 8002132:	d903      	bls.n	800213c <SModes_UDMovingHighSpeed_Mode+0x24>
	{
		Global_u8Speed = 100;
 8002134:	4b49      	ldr	r3, [pc, #292]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 8002136:	2264      	movs	r2, #100	; 0x64
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e004      	b.n	8002146 <SModes_UDMovingHighSpeed_Mode+0x2e>
	}
	else
	{
		Global_u8Speed+=2;
 800213c:	4b47      	ldr	r3, [pc, #284]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	3302      	adds	r3, #2
 8002142:	4a46      	ldr	r2, [pc, #280]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 8002144:	6013      	str	r3, [r2, #0]
	}


	/* Control on the speed (Current Speed)*/
	MotorDriver_voidControlSpeed(Global_u8Speed);
 8002146:	4b45      	ldr	r3, [pc, #276]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fec5 	bl	8001edc <MotorDriver_voidControlSpeed>

	/**  Check the distance **/
	u32 Local_Distance = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]

	Local_Distance = HAL_HCSR04_f32Read(HCSR04_SENSOR1);
 8002156:	2000      	movs	r0, #0
 8002158:	f7fe fdd4 	bl	8000d04 <HAL_HCSR04_f32Read>
 800215c:	6078      	str	r0, [r7, #4]

	if(Local_Distance > 95)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b5f      	cmp	r3, #95	; 0x5f
 8002162:	d901      	bls.n	8002168 <SModes_UDMovingHighSpeed_Mode+0x50>
	{
		Local_Distance = 100;
 8002164:	2364      	movs	r3, #100	; 0x64
 8002166:	607b      	str	r3, [r7, #4]
	}

	/* Display The Distance */
	CLCD_voidSendStringPosition("Distance= ", 1, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2101      	movs	r1, #1
 800216c:	483c      	ldr	r0, [pc, #240]	; (8002260 <SModes_UDMovingHighSpeed_Mode+0x148>)
 800216e:	f7fe fb8f 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidPrintINTNumber(Local_Distance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fbba 	bl	80008f6 <CLCD_voidPrintINTNumber>
	CLCD_voidSendStringPosition(" ", 1, 12);
 8002182:	220c      	movs	r2, #12
 8002184:	2101      	movs	r1, #1
 8002186:	4837      	ldr	r0, [pc, #220]	; (8002264 <SModes_UDMovingHighSpeed_Mode+0x14c>)
 8002188:	f7fe fb82 	bl	8000890 <CLCD_voidSendStringPosition>

	/*************************************************/
	GUI_voidSendSpeedDistance(Global_u8Speed, Local_Distance);
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f9b4 	bl	8000500 <GUI_voidSendSpeedDistance>
	/*************************************************/

	if(Local_Distance < LowDistance)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b09      	cmp	r3, #9
 800219c:	d803      	bhi.n	80021a6 <SModes_UDMovingHighSpeed_Mode+0x8e>
	{
		Current_State = Idle_State;
 800219e:	4b32      	ldr	r3, [pc, #200]	; (8002268 <SModes_UDMovingHighSpeed_Mode+0x150>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	e008      	b.n	80021b8 <SModes_UDMovingHighSpeed_Mode+0xa0>
	}
	else if((Local_Distance <= HighDistance) && (Local_Distance >= LowDistance))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b14      	cmp	r3, #20
 80021aa:	d805      	bhi.n	80021b8 <SModes_UDMovingHighSpeed_Mode+0xa0>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	d902      	bls.n	80021b8 <SModes_UDMovingHighSpeed_Mode+0xa0>
	{
		Current_State = MovingLowSpeed_State;
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <SModes_UDMovingHighSpeed_Mode+0x150>)
 80021b4:	2202      	movs	r2, #2
 80021b6:	701a      	strb	r2, [r3, #0]
    {
        Current_State = MovingHighSpeed_State;
    }*/

	/**  Check IR Sensors **/
	u8 Local_RightValue = IR_u8Read_RightIR();
 80021b8:	f7fe fdf2 	bl	8000da0 <IR_u8Read_RightIR>
 80021bc:	4603      	mov	r3, r0
 80021be:	70fb      	strb	r3, [r7, #3]
	u8 Local_LeftValue = IR_u8Read_LeftIR();
 80021c0:	f7fe fdfa 	bl	8000db8 <IR_u8Read_LeftIR>
 80021c4:	4603      	mov	r3, r0
 80021c6:	70bb      	strb	r3, [r7, #2]

	if((Local_RightValue == White) && (Local_LeftValue == White))
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10c      	bne.n	80021e8 <SModes_UDMovingHighSpeed_Mode+0xd0>
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <SModes_UDMovingHighSpeed_Mode+0xd0>
	{
		/* Turn off the Warning */
		Buzzer_Off();
 80021d4:	f7fe fa0e 	bl	80005f4 <Buzzer_Off>

		/* Move Forward */
		MotorDriver_voidMoveForward();
 80021d8:	f7ff fe98 	bl	8001f0c <MotorDriver_voidMoveForward>

		CLCD_voidSendStringPosition("FORWA ", 0, 10);
 80021dc:	220a      	movs	r2, #10
 80021de:	2100      	movs	r1, #0
 80021e0:	4822      	ldr	r0, [pc, #136]	; (800226c <SModes_UDMovingHighSpeed_Mode+0x154>)
 80021e2:	f7fe fb55 	bl	8000890 <CLCD_voidSendStringPosition>
 80021e6:	e022      	b.n	800222e <SModes_UDMovingHighSpeed_Mode+0x116>
	}
	else if((Local_LeftValue == Black) && (Local_RightValue == White))
 80021e8:	78bb      	ldrb	r3, [r7, #2]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10c      	bne.n	8002208 <SModes_UDMovingHighSpeed_Mode+0xf0>
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <SModes_UDMovingHighSpeed_Mode+0xf0>
	{
		/*Warning*/
		Buzzer_ON();
 80021f4:	f7fe f9f2 	bl	80005dc <Buzzer_ON>

		/* Turn Right */
		MotorDriver_voidMoveRight();
 80021f8:	f7ff fea2 	bl	8001f40 <MotorDriver_voidMoveRight>

		CLCD_voidSendStringPosition("TRIGHT", 0, 10);
 80021fc:	220a      	movs	r2, #10
 80021fe:	2100      	movs	r1, #0
 8002200:	481b      	ldr	r0, [pc, #108]	; (8002270 <SModes_UDMovingHighSpeed_Mode+0x158>)
 8002202:	f7fe fb45 	bl	8000890 <CLCD_voidSendStringPosition>
 8002206:	e012      	b.n	800222e <SModes_UDMovingHighSpeed_Mode+0x116>
	}
	else if((Local_RightValue == Black) && (Local_LeftValue == White))
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10c      	bne.n	8002228 <SModes_UDMovingHighSpeed_Mode+0x110>
 800220e:	78bb      	ldrb	r3, [r7, #2]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <SModes_UDMovingHighSpeed_Mode+0x110>
	{
		/*Warning*/
		Buzzer_ON();
 8002214:	f7fe f9e2 	bl	80005dc <Buzzer_ON>

		/* Turn Left */
		MotorDriver_voidMoveLeft();
 8002218:	f7ff feac 	bl	8001f74 <MotorDriver_voidMoveLeft>

		CLCD_voidSendStringPosition("TLEFT ", 0, 10);
 800221c:	220a      	movs	r2, #10
 800221e:	2100      	movs	r1, #0
 8002220:	4814      	ldr	r0, [pc, #80]	; (8002274 <SModes_UDMovingHighSpeed_Mode+0x15c>)
 8002222:	f7fe fb35 	bl	8000890 <CLCD_voidSendStringPosition>
 8002226:	e002      	b.n	800222e <SModes_UDMovingHighSpeed_Mode+0x116>
	}
	else
	{
		Current_State = Idle_State;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <SModes_UDMovingHighSpeed_Mode+0x150>)
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
	}

	CLCD_voidSendStringPosition("S", 1, 13);
 800222e:	220d      	movs	r2, #13
 8002230:	2101      	movs	r1, #1
 8002232:	4811      	ldr	r0, [pc, #68]	; (8002278 <SModes_UDMovingHighSpeed_Mode+0x160>)
 8002234:	f7fe fb2c 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidPrintINTNumber(Global_u8Speed);
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <SModes_UDMovingHighSpeed_Mode+0x144>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fb56 	bl	80008f6 <CLCD_voidPrintINTNumber>



	return Current_State;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <SModes_UDMovingHighSpeed_Mode+0x150>)
 800224c:	781b      	ldrb	r3, [r3, #0]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	08002788 	.word	0x08002788
 800225c:	200000d8 	.word	0x200000d8
 8002260:	08002774 	.word	0x08002774
 8002264:	08002780 	.word	0x08002780
 8002268:	200000d4 	.word	0x200000d4
 800226c:	08002794 	.word	0x08002794
 8002270:	0800279c 	.word	0x0800279c
 8002274:	080027a4 	.word	0x080027a4
 8002278:	08002784 	.word	0x08002784

0800227c <SModes_UDMovingLowSpeed_Mode>:



/** Low Speed Mode **/
State_t SModes_UDMovingLowSpeed_Mode(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	/* Display The Mode */
	CLCD_voidSendStringPosition(" Low Mode", 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	4857      	ldr	r0, [pc, #348]	; (80023e4 <SModes_UDMovingLowSpeed_Mode+0x168>)
 8002288:	f7fe fb02 	bl	8000890 <CLCD_voidSendStringPosition>
	Buzzer_Off();
 800228c:	f7fe f9b2 	bl	80005f4 <Buzzer_Off>

	/* Check about the speed */
	if (Global_u8Speed == LowSpeed)
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b32      	cmp	r3, #50	; 0x32
 8002296:	d103      	bne.n	80022a0 <SModes_UDMovingLowSpeed_Mode+0x24>
	{
		Global_u8Speed = LowSpeed;
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 800229a:	2232      	movs	r2, #50	; 0x32
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e012      	b.n	80022c6 <SModes_UDMovingLowSpeed_Mode+0x4a>
	}
	else if(Global_u8Speed < LowSpeed)
 80022a0:	4b51      	ldr	r3, [pc, #324]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b31      	cmp	r3, #49	; 0x31
 80022a6:	d805      	bhi.n	80022b4 <SModes_UDMovingLowSpeed_Mode+0x38>
	{
		Global_u8Speed+=2;
 80022a8:	4b4f      	ldr	r3, [pc, #316]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3302      	adds	r3, #2
 80022ae:	4a4e      	ldr	r2, [pc, #312]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e008      	b.n	80022c6 <SModes_UDMovingLowSpeed_Mode+0x4a>
	}
	else if(Global_u8Speed > LowSpeed)
 80022b4:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b32      	cmp	r3, #50	; 0x32
 80022ba:	d904      	bls.n	80022c6 <SModes_UDMovingLowSpeed_Mode+0x4a>
	{
		Global_u8Speed--;
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	4a49      	ldr	r2, [pc, #292]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022c4:	6013      	str	r3, [r2, #0]
	}

	/* Control on the speed (Current Speed)*/
	MotorDriver_voidControlSpeed(Global_u8Speed);
 80022c6:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fe05 	bl	8001edc <MotorDriver_voidControlSpeed>

	/**  Check the distance **/
	u32 Local_Distance = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]

	Local_Distance = HAL_HCSR04_f32Read(HCSR04_SENSOR1);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fd14 	bl	8000d04 <HAL_HCSR04_f32Read>
 80022dc:	6078      	str	r0, [r7, #4]

	if(Local_Distance > 95)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b5f      	cmp	r3, #95	; 0x5f
 80022e2:	d901      	bls.n	80022e8 <SModes_UDMovingLowSpeed_Mode+0x6c>
	{
		Local_Distance = 100;
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	607b      	str	r3, [r7, #4]
	}


	/* Display The Distance */
	CLCD_voidSendStringPosition("Distance= ", 1, 0);
 80022e8:	2200      	movs	r2, #0
 80022ea:	2101      	movs	r1, #1
 80022ec:	483f      	ldr	r0, [pc, #252]	; (80023ec <SModes_UDMovingLowSpeed_Mode+0x170>)
 80022ee:	f7fe facf 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidPrintINTNumber(Local_Distance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fafa 	bl	80008f6 <CLCD_voidPrintINTNumber>
	CLCD_voidSendStringPosition(" ", 1, 12);
 8002302:	220c      	movs	r2, #12
 8002304:	2101      	movs	r1, #1
 8002306:	483a      	ldr	r0, [pc, #232]	; (80023f0 <SModes_UDMovingLowSpeed_Mode+0x174>)
 8002308:	f7fe fac2 	bl	8000890 <CLCD_voidSendStringPosition>

	/*************************************************/
	GUI_voidSendSpeedDistance(Global_u8Speed, Local_Distance);
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f8f4 	bl	8000500 <GUI_voidSendSpeedDistance>
	/*************************************************/


	if(Local_Distance > HighDistance)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b14      	cmp	r3, #20
 800231c:	d903      	bls.n	8002326 <SModes_UDMovingLowSpeed_Mode+0xaa>
	{
		Current_State = MovingHighSpeed_State;
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <SModes_UDMovingLowSpeed_Mode+0x178>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e005      	b.n	8002332 <SModes_UDMovingLowSpeed_Mode+0xb6>
	}
	else if(Local_Distance < LowDistance)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b09      	cmp	r3, #9
 800232a:	d802      	bhi.n	8002332 <SModes_UDMovingLowSpeed_Mode+0xb6>
	{
		Current_State = Idle_State;
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <SModes_UDMovingLowSpeed_Mode+0x178>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    {
        Current_State = MovingLowSpeed_State;
    }*/

	/**  Check IR Sensors **/
	u8 Local_RightValue = IR_u8Read_RightIR();
 8002332:	f7fe fd35 	bl	8000da0 <IR_u8Read_RightIR>
 8002336:	4603      	mov	r3, r0
 8002338:	70fb      	strb	r3, [r7, #3]
	u8 Local_LeftValue = IR_u8Read_LeftIR();
 800233a:	f7fe fd3d 	bl	8000db8 <IR_u8Read_LeftIR>
 800233e:	4603      	mov	r3, r0
 8002340:	70bb      	strb	r3, [r7, #2]

	if((Local_RightValue == White) && (Local_LeftValue == White))
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10c      	bne.n	8002362 <SModes_UDMovingLowSpeed_Mode+0xe6>
 8002348:	78bb      	ldrb	r3, [r7, #2]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <SModes_UDMovingLowSpeed_Mode+0xe6>
	{
		/* Turn off the Warning */
		Buzzer_Off();
 800234e:	f7fe f951 	bl	80005f4 <Buzzer_Off>

		/* Move Forward */
		MotorDriver_voidMoveForward();
 8002352:	f7ff fddb 	bl	8001f0c <MotorDriver_voidMoveForward>

		CLCD_voidSendStringPosition("FORWA ", 0, 10);
 8002356:	220a      	movs	r2, #10
 8002358:	2100      	movs	r1, #0
 800235a:	4827      	ldr	r0, [pc, #156]	; (80023f8 <SModes_UDMovingLowSpeed_Mode+0x17c>)
 800235c:	f7fe fa98 	bl	8000890 <CLCD_voidSendStringPosition>
 8002360:	e022      	b.n	80023a8 <SModes_UDMovingLowSpeed_Mode+0x12c>
	}
	else if((Local_LeftValue == Black) && (Local_RightValue == White))
 8002362:	78bb      	ldrb	r3, [r7, #2]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10c      	bne.n	8002382 <SModes_UDMovingLowSpeed_Mode+0x106>
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <SModes_UDMovingLowSpeed_Mode+0x106>
	{
		/*Warning*/
		Buzzer_ON();
 800236e:	f7fe f935 	bl	80005dc <Buzzer_ON>

		/* Turn Right */
		MotorDriver_voidMoveRight();
 8002372:	f7ff fde5 	bl	8001f40 <MotorDriver_voidMoveRight>

		CLCD_voidSendStringPosition("TRIGHT", 0, 10);
 8002376:	220a      	movs	r2, #10
 8002378:	2100      	movs	r1, #0
 800237a:	4820      	ldr	r0, [pc, #128]	; (80023fc <SModes_UDMovingLowSpeed_Mode+0x180>)
 800237c:	f7fe fa88 	bl	8000890 <CLCD_voidSendStringPosition>
 8002380:	e012      	b.n	80023a8 <SModes_UDMovingLowSpeed_Mode+0x12c>
	}
	else if((Local_RightValue == Black) && (Local_LeftValue == White))
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10c      	bne.n	80023a2 <SModes_UDMovingLowSpeed_Mode+0x126>
 8002388:	78bb      	ldrb	r3, [r7, #2]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <SModes_UDMovingLowSpeed_Mode+0x126>
	{
		/*Warning*/
		Buzzer_ON();
 800238e:	f7fe f925 	bl	80005dc <Buzzer_ON>

		/* Turn Left */
		MotorDriver_voidMoveLeft();
 8002392:	f7ff fdef 	bl	8001f74 <MotorDriver_voidMoveLeft>

		CLCD_voidSendStringPosition("TLEFT ", 0, 10);
 8002396:	220a      	movs	r2, #10
 8002398:	2100      	movs	r1, #0
 800239a:	4819      	ldr	r0, [pc, #100]	; (8002400 <SModes_UDMovingLowSpeed_Mode+0x184>)
 800239c:	f7fe fa78 	bl	8000890 <CLCD_voidSendStringPosition>
 80023a0:	e002      	b.n	80023a8 <SModes_UDMovingLowSpeed_Mode+0x12c>
	}
	else
	{
		Current_State = Idle_State;
 80023a2:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <SModes_UDMovingLowSpeed_Mode+0x178>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
	}

	/* Display The Speed */
	if(Global_u8Speed < 10 )
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d804      	bhi.n	80023ba <SModes_UDMovingLowSpeed_Mode+0x13e>
	{
		CLCD_voidSendStringPosition(" ", 1, 15);
 80023b0:	220f      	movs	r2, #15
 80023b2:	2101      	movs	r1, #1
 80023b4:	480e      	ldr	r0, [pc, #56]	; (80023f0 <SModes_UDMovingLowSpeed_Mode+0x174>)
 80023b6:	f7fe fa6b 	bl	8000890 <CLCD_voidSendStringPosition>
	}
	CLCD_voidSendStringPosition("S", 1, 13);
 80023ba:	220d      	movs	r2, #13
 80023bc:	2101      	movs	r1, #1
 80023be:	4811      	ldr	r0, [pc, #68]	; (8002404 <SModes_UDMovingLowSpeed_Mode+0x188>)
 80023c0:	f7fe fa66 	bl	8000890 <CLCD_voidSendStringPosition>
	CLCD_voidPrintINTNumber(Global_u8Speed);
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <SModes_UDMovingLowSpeed_Mode+0x16c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fa90 	bl	80008f6 <CLCD_voidPrintINTNumber>


	return Current_State;
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <SModes_UDMovingLowSpeed_Mode+0x178>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	080027ac 	.word	0x080027ac
 80023e8:	200000d8 	.word	0x200000d8
 80023ec:	08002774 	.word	0x08002774
 80023f0:	08002780 	.word	0x08002780
 80023f4:	200000d4 	.word	0x200000d4
 80023f8:	08002794 	.word	0x08002794
 80023fc:	0800279c 	.word	0x0800279c
 8002400:	080027a4 	.word	0x080027a4
 8002404:	08002784 	.word	0x08002784

08002408 <NMI_Handler>:
#include "HCSR04_Interface.h"
#include "STM32F4xx_ISR.h"

extern TIM_HandleTypeDef htim2;

void NMI_Handler(void) {}
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HardFault_Handler>:

void HardFault_Handler(void) {}
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <MemManage_Handler>:

void MemManage_Handler(void) {}
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <BusFault_Handler>:

void BusFault_Handler(void) {}
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <UsageFault_Handler>:

void UsageFault_Handler(void) {}
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <DebugMon_Handler>:

void DebugMon_Handler(void) {}
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	if (TIM_xCheckINTFlag(&US_htim2, TIM_INT_UPDATE) != RESET) {
 8002460:	2101      	movs	r1, #1
 8002462:	4815      	ldr	r0, [pc, #84]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 8002464:	f7ff fb5e 	bl	8001b24 <TIM_xCheckINTFlag>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00d      	beq.n	800248a <TIM2_IRQHandler+0x2e>
		if (TIM_xCheckINTSrc(&US_htim2, TIM_INT_UPDATE) != RESET) {
 800246e:	2101      	movs	r1, #1
 8002470:	4811      	ldr	r0, [pc, #68]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 8002472:	f7ff fb2b 	bl	8001acc <TIM_xCheckINTSrc>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <TIM2_IRQHandler+0x2e>
			TIM_vClearFlag(&US_htim2, TIM_INT_UPDATE);
 800247c:	2101      	movs	r1, #1
 800247e:	480e      	ldr	r0, [pc, #56]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 8002480:	f7ff fb3a 	bl	8001af8 <TIM_vClearFlag>
			HAL_HCSR04_TMR_OVF_ISR(&US_htim2);
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 8002486:	f7fe fb75 	bl	8000b74 <HAL_HCSR04_TMR_OVF_ISR>
		}
	}

	if (TIM_xCheckINTFlag(&US_htim2, TIM_INT_CC1) != RESET) {
 800248a:	2102      	movs	r1, #2
 800248c:	480a      	ldr	r0, [pc, #40]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 800248e:	f7ff fb49 	bl	8001b24 <TIM_xCheckINTFlag>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00d      	beq.n	80024b4 <TIM2_IRQHandler+0x58>
		if (TIM_xCheckINTSrc(&US_htim2, TIM_INT_CC1) != RESET) {
 8002498:	2102      	movs	r1, #2
 800249a:	4807      	ldr	r0, [pc, #28]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 800249c:	f7ff fb16 	bl	8001acc <TIM_xCheckINTSrc>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d006      	beq.n	80024b4 <TIM2_IRQHandler+0x58>
			TIM_vClearFlag(&US_htim2, TIM_INT_CC1);
 80024a6:	2102      	movs	r1, #2
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 80024aa:	f7ff fb25 	bl	8001af8 <TIM_vClearFlag>
			HAL_HCSR04_TMR_IC_ISR(&US_htim2);
 80024ae:	4802      	ldr	r0, [pc, #8]	; (80024b8 <TIM2_IRQHandler+0x5c>)
 80024b0:	f7fe fb8c 	bl	8000bcc <HAL_HCSR04_TMR_IC_ISR>
		}
	}
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000034 	.word	0x20000034

080024bc <TimerDelay_Init>:

#define  TIMER  TIM4
volatile static u32 Gb_u32Ticks = 0;
TIM_HandleTypeDef HTIMx;

void TimerDelay_Init(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

	HTIMx.Instance = TIMER;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <TimerDelay_Init+0x40>)
 80024c2:	4a0f      	ldr	r2, [pc, #60]	; (8002500 <TimerDelay_Init+0x44>)
 80024c4:	601a      	str	r2, [r3, #0]
	HTIMx.Init.TIM_Prescaler = TIM_CLKPRESCALER_8;  // Set prescaler to provide 1 us timebase
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <TimerDelay_Init+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	815a      	strh	r2, [r3, #10]
	HTIMx.Init.TIM_Mode = TIM_MODE_TIMING;  // Set timer to basic mode
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <TimerDelay_Init+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	711a      	strb	r2, [r3, #4]
	HTIMx.Init.TIM_CounterMode = TIM_COUNTERMODE_UP;  // Set counter to count up
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <TimerDelay_Init+0x40>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	739a      	strb	r2, [r3, #14]
	HTIMx.Init.TIM_Period = TIM_MAX_PERIOD_VALUE;  // Set maximum period
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <TimerDelay_Init+0x40>)
 80024da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024de:	811a      	strh	r2, [r3, #8]
	HTIMx.Init.TIM_INT = TIM_INT_DISABLE;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <TimerDelay_Init+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	719a      	strb	r2, [r3, #6]
	HTIMx.Channel = TIM_CHANNEL_4;
 80024e6:	4b05      	ldr	r3, [pc, #20]	; (80024fc <TimerDelay_Init+0x40>)
 80024e8:	2204      	movs	r2, #4
 80024ea:	751a      	strb	r2, [r3, #20]
	TIM_vInit(&HTIMx);  // Initialize TIM4
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <TimerDelay_Init+0x40>)
 80024ee:	f7ff f87f 	bl	80015f0 <TIM_vInit>
	TIM_vInitCounter(&HTIMx);
 80024f2:	4802      	ldr	r0, [pc, #8]	; (80024fc <TimerDelay_Init+0x40>)
 80024f4:	f7ff fc58 	bl	8001da8 <TIM_vInitCounter>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000010c 	.word	0x2000010c
 8002500:	40000800 	.word	0x40000800

08002504 <UART_voidInit>:
static void (* UART1_CallBack) (void) = NULL ;

u8  G_u8AMessage[10] = {0};

void  UART_voidInit(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
	//Enable Tx
	SET_BIT(UART1->CR1,3);
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <UART_voidInit+0x48>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4a0f      	ldr	r2, [pc, #60]	; (800254c <UART_voidInit+0x48>)
 800250e:	f043 0308 	orr.w	r3, r3, #8
 8002512:	60d3      	str	r3, [r2, #12]
	//Enable Rx
	SET_BIT(UART1->CR1,2);
 8002514:	4b0d      	ldr	r3, [pc, #52]	; (800254c <UART_voidInit+0x48>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a0c      	ldr	r2, [pc, #48]	; (800254c <UART_voidInit+0x48>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	60d3      	str	r3, [r2, #12]
	// select Word length (8-bit)
	CLEAR_BIT(UART1->CR1,12);
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <UART_voidInit+0x48>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <UART_voidInit+0x48>)
 8002526:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800252a:	60d3      	str	r3, [r2, #12]
	//select Buad Rate (9600)->BRR - CLK ->16MHz
	UART1->BRR=0x683 ;
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <UART_voidInit+0x48>)
 800252e:	f240 6283 	movw	r2, #1667	; 0x683
 8002532:	609a      	str	r2, [r3, #8]
	//Enable UART
	SET_BIT(UART1->CR1,13);
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <UART_voidInit+0x48>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <UART_voidInit+0x48>)
 800253a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800253e:	60d3      	str	r3, [r2, #12]



}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40011000 	.word	0x40011000

08002550 <UART_voidTransmit>:

void  UART_voidTransmit(u8 *Copyu8_Frame,u8 Copyu8_BlockSize)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]

	for(u8 i=0;i<Copyu8_BlockSize;i++)
 800255c:	2300      	movs	r3, #0
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e010      	b.n	8002584 <UART_voidTransmit+0x34>
	{
		while(!GET_BIT(UART1->SR,6));
 8002562:	bf00      	nop
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <UART_voidTransmit+0x4c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f8      	beq.n	8002564 <UART_voidTransmit+0x14>
		UART1->DR=Copyu8_Frame[i];
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <UART_voidTransmit+0x4c>)
 800257c:	605a      	str	r2, [r3, #4]
	for(u8 i=0;i<Copyu8_BlockSize;i++)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	3301      	adds	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	429a      	cmp	r2, r3
 800258a:	d3ea      	bcc.n	8002562 <UART_voidTransmit+0x12>
	}
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40011000 	.word	0x40011000

080025a0 <main>:
/**
 * @brief Main function of the application.
 * @return Returns 0 upon successful execution.
 */
int main(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
	/** Local Variables **/
	State_t Local_Current_State = Idle_State ;
 80025a6:	2300      	movs	r3, #0
 80025a8:	71fb      	strb	r3, [r7, #7]

	/** Initialization **/
	SInit_VoidINIT();
 80025aa:	f7ff fcfd 	bl	8001fa8 <SInit_VoidINIT>

	/** Infinity Loop **/
	while(1)
	{
        switch(Local_Current_State)
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d010      	beq.n	80025d6 <main+0x36>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	dcfa      	bgt.n	80025ae <main+0xe>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <main+0x22>
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d005      	beq.n	80025cc <main+0x2c>
 80025c0:	e7f5      	b.n	80025ae <main+0xe>
        {
            case Idle_State           : Local_Current_State = SModes_UDIdleMode();              break;
 80025c2:	f7ff fd1b 	bl	8001ffc <SModes_UDIdleMode>
 80025c6:	4603      	mov	r3, r0
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	e009      	b.n	80025e0 <main+0x40>

            case MovingHighSpeed_State: Local_Current_State = SModes_UDMovingHighSpeed_Mode();  break;
 80025cc:	f7ff fda4 	bl	8002118 <SModes_UDMovingHighSpeed_Mode>
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
 80025d4:	e004      	b.n	80025e0 <main+0x40>

            case MovingLowSpeed_State : Local_Current_State = SModes_UDMovingLowSpeed_Mode();   break;
 80025d6:	f7ff fe51 	bl	800227c <SModes_UDMovingLowSpeed_Mode>
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	bf00      	nop
        switch(Local_Current_State)
 80025e0:	e7e5      	b.n	80025ae <main+0xe>
	...

080025e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e4:	480d      	ldr	r0, [pc, #52]	; (800261c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80025e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002612:	f000 f811 	bl	8002638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002616:	f7ff ffc3 	bl	80025a0 <main>

0800261a <LoopForever>:

LoopForever:
    b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   r0, =_estack
 800261c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8002628:	080027ec 	.word	0x080027ec
  ldr r2, =_sbss
 800262c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8002630:	20000124 	.word	0x20000124

08002634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC_IRQHandler>
	...

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4d0d      	ldr	r5, [pc, #52]	; (8002670 <__libc_init_array+0x38>)
 800263c:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <__libc_init_array+0x3c>)
 800263e:	1b64      	subs	r4, r4, r5
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	2600      	movs	r6, #0
 8002644:	42a6      	cmp	r6, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	4d0b      	ldr	r5, [pc, #44]	; (8002678 <__libc_init_array+0x40>)
 800264a:	4c0c      	ldr	r4, [pc, #48]	; (800267c <__libc_init_array+0x44>)
 800264c:	f000 f87c 	bl	8002748 <_init>
 8002650:	1b64      	subs	r4, r4, r5
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	2600      	movs	r6, #0
 8002656:	42a6      	cmp	r6, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002660:	4798      	blx	r3
 8002662:	3601      	adds	r6, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	f855 3b04 	ldr.w	r3, [r5], #4
 800266a:	4798      	blx	r3
 800266c:	3601      	adds	r6, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	080027e4 	.word	0x080027e4
 8002674:	080027e4 	.word	0x080027e4
 8002678:	080027e4 	.word	0x080027e4
 800267c:	080027e8 	.word	0x080027e8

08002680 <__itoa>:
 8002680:	1e93      	subs	r3, r2, #2
 8002682:	2b22      	cmp	r3, #34	; 0x22
 8002684:	b510      	push	{r4, lr}
 8002686:	460c      	mov	r4, r1
 8002688:	d904      	bls.n	8002694 <__itoa+0x14>
 800268a:	2300      	movs	r3, #0
 800268c:	700b      	strb	r3, [r1, #0]
 800268e:	461c      	mov	r4, r3
 8002690:	4620      	mov	r0, r4
 8002692:	bd10      	pop	{r4, pc}
 8002694:	2a0a      	cmp	r2, #10
 8002696:	d109      	bne.n	80026ac <__itoa+0x2c>
 8002698:	2800      	cmp	r0, #0
 800269a:	da07      	bge.n	80026ac <__itoa+0x2c>
 800269c:	232d      	movs	r3, #45	; 0x2d
 800269e:	700b      	strb	r3, [r1, #0]
 80026a0:	4240      	negs	r0, r0
 80026a2:	2101      	movs	r1, #1
 80026a4:	4421      	add	r1, r4
 80026a6:	f000 f80d 	bl	80026c4 <__utoa>
 80026aa:	e7f1      	b.n	8002690 <__itoa+0x10>
 80026ac:	2100      	movs	r1, #0
 80026ae:	e7f9      	b.n	80026a4 <__itoa+0x24>

080026b0 <itoa>:
 80026b0:	f7ff bfe6 	b.w	8002680 <__itoa>

080026b4 <memset>:
 80026b4:	4402      	add	r2, r0
 80026b6:	4603      	mov	r3, r0
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d100      	bne.n	80026be <memset+0xa>
 80026bc:	4770      	bx	lr
 80026be:	f803 1b01 	strb.w	r1, [r3], #1
 80026c2:	e7f9      	b.n	80026b8 <memset+0x4>

080026c4 <__utoa>:
 80026c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c6:	4c1f      	ldr	r4, [pc, #124]	; (8002744 <__utoa+0x80>)
 80026c8:	b08b      	sub	sp, #44	; 0x2c
 80026ca:	4605      	mov	r5, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	466e      	mov	r6, sp
 80026d0:	f104 0c20 	add.w	ip, r4, #32
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	6861      	ldr	r1, [r4, #4]
 80026d8:	4637      	mov	r7, r6
 80026da:	c703      	stmia	r7!, {r0, r1}
 80026dc:	3408      	adds	r4, #8
 80026de:	4564      	cmp	r4, ip
 80026e0:	463e      	mov	r6, r7
 80026e2:	d1f7      	bne.n	80026d4 <__utoa+0x10>
 80026e4:	7921      	ldrb	r1, [r4, #4]
 80026e6:	7139      	strb	r1, [r7, #4]
 80026e8:	1e91      	subs	r1, r2, #2
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	6038      	str	r0, [r7, #0]
 80026ee:	2922      	cmp	r1, #34	; 0x22
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	d904      	bls.n	8002700 <__utoa+0x3c>
 80026f6:	7019      	strb	r1, [r3, #0]
 80026f8:	460b      	mov	r3, r1
 80026fa:	4618      	mov	r0, r3
 80026fc:	b00b      	add	sp, #44	; 0x2c
 80026fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002700:	1e58      	subs	r0, r3, #1
 8002702:	4684      	mov	ip, r0
 8002704:	fbb5 f7f2 	udiv	r7, r5, r2
 8002708:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800270c:	fb02 5617 	mls	r6, r2, r7, r5
 8002710:	4476      	add	r6, lr
 8002712:	460c      	mov	r4, r1
 8002714:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002718:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800271c:	462e      	mov	r6, r5
 800271e:	42b2      	cmp	r2, r6
 8002720:	f101 0101 	add.w	r1, r1, #1
 8002724:	463d      	mov	r5, r7
 8002726:	d9ed      	bls.n	8002704 <__utoa+0x40>
 8002728:	2200      	movs	r2, #0
 800272a:	545a      	strb	r2, [r3, r1]
 800272c:	1919      	adds	r1, r3, r4
 800272e:	1aa5      	subs	r5, r4, r2
 8002730:	42aa      	cmp	r2, r5
 8002732:	dae2      	bge.n	80026fa <__utoa+0x36>
 8002734:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002738:	780e      	ldrb	r6, [r1, #0]
 800273a:	7006      	strb	r6, [r0, #0]
 800273c:	3201      	adds	r2, #1
 800273e:	f801 5901 	strb.w	r5, [r1], #-1
 8002742:	e7f4      	b.n	800272e <__utoa+0x6a>
 8002744:	080027b6 	.word	0x080027b6

08002748 <_init>:
 8002748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274a:	bf00      	nop
 800274c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800274e:	bc08      	pop	{r3}
 8002750:	469e      	mov	lr, r3
 8002752:	4770      	bx	lr

08002754 <_fini>:
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	bf00      	nop
 8002758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275a:	bc08      	pop	{r3}
 800275c:	469e      	mov	lr, r3
 800275e:	4770      	bx	lr
